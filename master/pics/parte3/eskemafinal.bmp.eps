%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: eskemafinal.bmp.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Master Roshi
%%CreationDate: 17-06-2008, 20:42:01
%%BoundingBox: 0 0 596 713
%%HiResBoundingBox: 0 0 595.0801 712.3801
%%CropBox: 0 0 595.0801 712.3801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4354 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreateDate="2008-06-17T20:41:43+01:00"
   xap:CreatorTool="Acrobat PDFMaker 8.1 for PowerPoint"
   xap:ModifyDate="2008-06-17T20:41:45+01:00"
   xap:MetadataDate="2008-06-17T20:41:45+01:00"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:16fc1f27-f0aa-4962-a59f-d565c68f13af"
   xapMM:InstanceID="uuid:4c792052-9a26-4752-a8b3-16b6ba9f6e38">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Vasco Neves</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Diapositivo 1</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 15 
/Lookup <~
!!!$!s8SRXrr<$!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -712.38 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 712.38 li
595.08 712.38 li
595.08 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 -.063 mo
595.017 -.063 li
595.017 712.323 li
0 712.323 li
0 -.063 li
eclp
227.583 712.341 mo
367.56 712.341 li
367.56 -.063 li
227.583 -.063 li
227.583 712.341 li
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 .6 colr
f
grestore
227.583 483.363 mo
0 483.363 li
0 254.403 li
227.583 254.403 li
227.583 483.363 li
false sop
gsave
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 712.38 ]ct
[228.343 0 0 229.636 -.338287 228.682 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 675 
/H 679 
/M[675 0 0 -679 0 679 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 675 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 675 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 675 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$S
K'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!
K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<
XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$SK'Tr4bQ!1oK)^H&K)^r4
s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^W+r9Jt#K'S$SK'S$Si9UFCV<`a!K'S$S
K'Tr4bQ!1oK)^H&K)^r4s8Rc<K'S$SK'S$Sg$A\<XQtK(K'S$SK'T]-df4q!K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^r4K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^]-J,~>

%%EndBinary
grestore
np
229.023 483.363 mo
227.583 483.363 li
227.583 254.403 li
229.023 254.403 li
229.023 483.363 li
gsave
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 712.38 ]ct
[2.02972 0 0 229.636 227.329 228.682 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 6 
/H 679 
/M[6 0 0 -679 0 679 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 6 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 6 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 6 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
p&FoWp&FoWrTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN--hRHsk<s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`oQs6K^brTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frp'XOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO!<3'!rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTaObs6K[Ms8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W,bs6K^brN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rp'XOs8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`!<3'!rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTaObs/l:&s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W,$s/l<hrTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`riH7(R@4$>
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"!1<hTrTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN--hRHsk<s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`oQs6K^brTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frp'XO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO!<3'!rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTaObs6K[Ms8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W,bs6K^brN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rp'XOs8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`!<3'!rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTaObs/l:&s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W,$s/l<hrTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTaObs6K[Ms8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W,bs6K^brN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rp'XOs8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`!<3'!rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTaObs/l:&s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W,$s/l<hrTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`riH7(R@4$>s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"!1<hTrTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN--hRHsk<s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`oQs6K^brTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frp'XOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO!<3'!rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTaObs6K[Ms8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W,bs6K^b
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rp'XOs8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`!<3'!
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTaObs/l:&s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W,$
s/l<hrTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`riH7(R@4$>s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
!1<hTrTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`
rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN--hRHsk<s8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`oQs6K^brTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTaObs/l:&s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W,$s/l<hrTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`riH7(R@4$>s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"!1<hTrTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN--hRHsk<s8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`oQs6K^brTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frp'XOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iO!<3'!rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTaObs6K[Ms8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W,bs6K^brN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rp'XOs8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`!<3'!rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTaObs/l:&s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W,$s/l<hrTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`riH7(R@4$>s8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"!1<hTrTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN--hRHsk<
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`oQs6K^brTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frp'XOs8W&`s8W&"s-`iOs8W&`s8W&"
s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iO
s8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`
s8W&"s-`iOs8W&`s8W&"s-`iO!<3'!rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`
rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*f
rTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTjL`rTjL`rN6*frTaOb
s6K[Ms8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`iOs8W&`s8W&"s-`Q[qjI-WqjDs~>

%%EndBinary
grestore
np
483.42 462.9 mo
559.8 462.9 li
559.8 412.02 li
483.42 412.02 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .8 1 colr
f
483.12 412.02 mo
483.18 411.78 li
483.48 411.66 li
559.8 411.66 li
560.04 411.78 li
560.16 412.02 li
560.16 462.9 li
560.04 463.14 li
559.8 463.26 li
483.48 463.26 li
483.18 463.14 li
483.12 462.9 li
cp
483.78 462.9 mo
483.48 462.54 li
559.8 462.54 li
559.44 462.9 li
559.44 412.02 li
559.8 412.38 li
483.48 412.38 li
483.78 412.02 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d73000000cc000000606376
7420a11cd7eb0000012c000006546670676dcc79599a000007800000066e
676c796607022dca000094e0000822cc68656164d6144b3e00000df00000
003668686561123315fe00000e2800000024686d7478f65efffb00000e4c
000034d46c6f6361361cd72000004320000034d86d617870124c05df0000
77f8000000206e616d659617a74000007818000011057072657025d64dbf
0000892000000bbe67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200004
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
4043555441403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
00000005028fa58dc35f5f0f3cf5081b080000000000a2e3272a00000000
c14fd713faaffd671000080c00000009000100010000000000010000073e
fe4e00431000faaffa7a1000000100000000000000000000000000000d35
06000100000000000239000002390000023900b002d7005e047300150473
0049071d0077055600580187005a02aa007c02aa007c031d004004ac0072
023900aa02aa0041023900ba0239000004730055047300df0473003c0473
00560473001a047300550473004d047300610473005304730055023900b9
023900aa04ac007004ac007204ac00700473005a081f006f0556fffd0556
009605c7006605c7009e055600a204e300a80639006d05c700a4023900bf
04000037055600960473009606aa009805c7009c063900630556009e0639
005805c700a10556005c04e3003005c700a105560009078d001905560009
0556000604e300290239008b023900000239002703c100360473ffe102aa
00590473004a0473008604000050047300460473004b0239001304730042
0473008701c7008801c7ffa20400008801c7008306aa0087047300870473
0044047300870473004802aa00850400003f02390024047300830400001a
05c700060400000f040000210400002802ac0039021400bc02ac002f04ac
00570556fffd0556fffd05c70068055600a205c7009c0639006305c700a1
0473004a0473004a0473004a0473004a0473004a0473004a040000500473
004b0473004b0473004b0473004b023900bd023900230239ffe502390009
047300870473004404730044047300440473004404730044047300830473
0083047300830473008304730049033300800473006b0473001b04730051
02cd006d044c000104e3009905e5000305e50003080000e102aa00de02aa
003d0464004e080000010639005305b4009a0464004e0464004d0464004d
0473fffd049c00a003f4003805b4007a069600a1046400000231000002f6
002f02ec002d0625007f071d004404e3008104e3009e02aa00e804ac0072
046400540473002e0464003304e5001a047300860473008c080000ef0556
fffd0556fffd0639006308000081078d00520473fffc0800000002aa0053
02aa004701c7008001c7006c0464004e03f4002f04000021055600060156
fe390473ffe402aa005c02aa005c040000170400001704730049023900b9
01c7006c02aa0047080000250556fffd055600a20556fffd055600a20556
00a20239008d0239ffe00239000402390015063900630639006306390063
05c700a105c700a105c700a1023900c602aa001902aa000602aa001d02aa
002e02aa00e502aa00a202aa006b02aa003a02aa004b02aa002804730000
01c700030556005c0400003f04e3002904000028021400bc05c7fffd0473
004905560006040000210556009e0473008704ac007204ac00a102aa006b
02aa001902aa002106ac006b06ac006b06ac0021047300000639006d0473
0042023900b10556005c0400003f05c700660400005005c7006604000050
04730046046bffe102aa00ee0556fffd0473004a0556fffd0473004a05c7
009e04eb004705c7fffd055600a20473004b055600a20473004b04730096
01c7004204730096025500880473009a02ac008305c7009c0473008705c7
009c04730087063900630473004405c700a102aa008505c700a102aa003c
0556005c0400003f04e300300239002404e300300300002305c700a10473
008305c700a10473008304e300290400002804e3002904000028046800a4
063900600662005504a00048047400480391006204f000440329002e0530
0048046bffe1040000b002eb005208c000330800004f040000990800004f
040000990800004f040000980400009807d5016a05c0009e04ab007204d5
009d04ac007104d5022204d5010505abffe9050001c905ab027e05abffe9
05ab027e05abffe905ab027e05abffe905abffe905abffe905abffe905ab
ffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe9
05ab027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab
01c005ab01c005abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905ab02d605ab006605abffea05d5ffff04d50092
0800000007eb013007eb012007eb013007eb012004d500b204d5008004d5
002a082b0198086b01b807550010060000f40600006f0440003a05400037
04c0003f04150040040000250600005505e100bf038d008904d5ffd90180
008002d50086071500610296000f04d5009202d6008302d6008304d500b2
02d600700556fffd0473004a05c700660400005005c70066040000500556
00a20473004b055600a20473004b055600a20473004b0639006d04730042
0639006d047300420639006d0473004205c700a40473008705c7001f0473
00060239ffce0239ffce0239ffe40239ffe40239fff60239fff50239004b
01c700190400003701c7ffa20556009604000088040000860473009601c7
fffa05c7009c0473008705c900a50473008b063900630473004406390063
0473004405c700a102aa006b0556005c0400003f04e300300239000c05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
078d001905c70006055600060400002101c700890556fffd0473004a0800
0001071d00440639005304e30081023900b9078d001905c70006078d0019
05c70006078d001905c70006055600060400002101c7008a02aaffe10473
001b04cd005a06ac006b06ac002206ac002206ac004a02aa00e202aa006b
02aa00de02aaffea0557ffff0646ffa706b4ffa80312ffa80632ffa706d8
ffa70605ffa701c7ff780556fffd055600960558fffe055600a204e30029
05c700a4023900bf055600960558000b06aa009805c7009c0533006d0639
006305c700a40556009e04f2009404e30030055600060556000906af007f
05fb0061023900040556000604a00048039100620473008b01c7006b0460
0088049a008c04000019038700480473008b0473005c01c7008904000086
04000018049c00a00400001a0395005c04730044048d008303db00560460
00880433001105b4007a063f005701c7ffc9046000880473004804600088
063f0057055700a206eb0032045500a105c000640556005c023900bf0239
0004040000370875000d081500a406d5003104a900a10515000a05c000a0
0556fffd054000a705560096045500a1056b0000055600a20763000704d5
004e05c000a105c000a104a900a10540001206aa009805c700a406390063
05c000a00556009e05c7006604e300300515000a061500520556000905eb
009f05550057075500a1078000a106550000071500a8054000a505c00055
081500a405c7001a0473004a0495005b0440008802eb008804ab00000473
004b055afffb03ab003204780087047800870380008604ab00180580008c
046b00880473004404550088047300870400005003aa0026040000210695
004b0400000f0495008a042b0045066b008d0695008d0500002805c0008b
042b008404150030060000890455001f0473004b0473000002eb00890415
004b0400003f01c700880239000901c7ffa2074000130680008304730000
0380008604000021046b008803e900a1034a008808000041089500a00585
002d000001010000001e0000003100000031000001010000007e0000007e
0000008c0000008c000001010000001000000101000001210310007d0000
008c023300d20000030b0000ff04023900b9048100690456003203310019
0411002d04d1009601f9009b030f005f04ca009b04b8008c01f9009b0413
002803b0005003b4003c04ca009b04cf005001f9009b02d2003c0498005a
043c00190488006e045f007303b1001903d4000a0466009604130028058e
00640524002803f2009b03f2009b03f2009b01e3005a0356005a0686009b
01f9ffac041300280413002803b4ff5703b4ff570448002d058e0064058e
0064058e0064058e00640481006904810069048100690456003203310019
0411002d04d10096024b0000034a000004b8008c024b00000413002803b0
005003b4003c04cf005002d2003c0498005a0488006e045f007303d4000a
0466009604130028058e00640524002801f9009b0456003203b00050045f
0073049b003c0000ffdc0000ff250000ffdc0000fe51028d00ab028d00a0
02da0043034d007901a8ffba000000460000004600000046000000460000
00480000004600000046000000460435017c0435012e043500b704350081
0435012c043500be043500af043500810435009a043500db04350085028d
00c1043500b3060001000600010002420036060001000435009e04350098
043500cb0600010006000100060001000600010006000100000000460600
010006000100060001000600010006000100060001000600010006000100
051bffba06000100060001000600010005b5003a05b5003a01f4ffba01f4
ffba060001000600010006000100060001000481003604350036043dffba
043dffba03e9004a03e9004a067f0014077600140327ffba041effba067f
0014077600140327ffba041effba051b003204b500240300fff706000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010000000030
0000004600000046000000400000004606000100060001000000ffdc0000
fe510000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ff160000ff160000ffdc0000ff160000ffdc0000ff200000ffdc0473
004a08000000060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100060001000600010006000100028d
007f028d005d0600010004ee0015034d007901a8000e01d6ffdc01a80056
01d60010037500320375003201a8002d01d60013051b003204b5002401f4
ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba01f4ffba
024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba02b3
005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5ffba
06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7
ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a039a0036
0435ffba0327ffba064f0027064f00270224ffba021affba04a7004604a7
00460224ffba021affba04cf002d04cf002d0327ffba0327ffba040d0047
040d004701a8ffba01a8ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba024200360300fff7039affba0327ffba
0375003203750032051b003204b50024051b003204b5002401f4ffba01f4
ffba045a004004ce0049045a002604ce0039045a005304ce004a045a0053
04ce004a0600010006000100000000460000004606000100060001000600
010000000046000000460600010006000100000000480000004606000100
060001000600010000000046000000460000004600000046000000400000
003006000100000000460000004606000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d00ca028d00c7028d
00c606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000100ffba0800ffba1000ffba06dc0063053f004406d5
00a1055b00830000fddc0000fc2f0000fca60000fe540000fcd70000fd73
0000fe290000fe0d0000fd110000fc670000fd9d0000fbf50000fc720000
fed50000fed50000ff02041b00a006ac006b06ac00190000feb60000fd73
0000fe080000fca60000fe530000fd110000fbc80000faf40000faaf0000
fc720000fbaa0000fb6a0000fcf10000fc7d0000fbdd0000fcc10000fb98
0000fdea0000fe840000fdc20000fcf10000fd5f0000fe760000febc0000
fceb0000fd6c0000fd580000fc900000fd150000fc2c0000fc130000fc12
0000fb960000fb9601c700880556fffd0473004a0556fffd0473004a0556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a055600a20473004b055600a2
0473004b055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b0239006301c7001f
023900ba01c7007c06390063047300440639006304730044063900630473
004406390063047300440639006304730044063900630473004406390063
0473004406dc0063053f004406dc0063053f004406dc0063053f004406dc
0063053f004406dc0063053f004405c700a10473008305c700a104730083
06d500a1055b008306d500a1055b008306d500a1055b008306d500a1055b
008306d500a1055b00830556000604000021055600060400002105560006
040000210556fffd0473004a0239ffe201c7ffb0063900630473004405c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a1047300830000fefe0000fefe0000fefe0000fefe0455fffd02eb
000c07630007055afffb04a900a10380008604a900a10380008605c700a4
046b00880473fffd040000140473fffd04000014055600090400000f0555
0057042b0045055500a10473008706050063047300550639006004730044
05b5003a01f4ffba0224ffba021affba04a7004601f4009e01f4001001f4
001b01f4001001f4006b01f4fff90227ffce0000000f0000fff502aa00a4
02aa00a40000000e00000056000000560000ffcf01a8000f01d6ffbf01a8
fff501d6ffcd01a8001d01d6fff501a8009301d600130375003203750032
0375003203750032051b003204b5002405b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba0481003604350036043dffba043dffba048100360435
0036043dffba043dffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba02b3003202b3003202b3005f02b3005f
02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3005f02b3
005f02b3005f02b3005f02b3003802b3003802b3004902b3004903e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba045a
002a039a00360435ffba0327ffba064f0027064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba04a7004604a7004604a7004604a70046093e0032093e
00320740ffba0740ffba067f0014077600140327ffba041effba04cf002d
04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba04cf
002d04cf002d0327ffba0327ffba067f0014077600140327ffba041effba
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba040d0047040d004701a8ffba01a8ffba040d0047040d004701a8
ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba043500450435004501f4ffba01f4ffba043500450435
00450435004504350045043500450435004501f4ffba01f4ffba04350045
043500450481003604350036043dffba043dffba024200360300fff7031a
001a031a001a031a001a0375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032037500320375003203750032051bffba04b5ffba051b003204b50024
01f4ffba01f4ffba0375003203750032051b003204b5002401f4ffba01f4
ffba051b003204b50024067f0045067f0045067f0045067f004501a80028
0000fe290000fea20000ff300000ff1d0000ff120000ff920000fe7e08fc
003208ad00320000ffb50000ffb60000feed0000ff640000fe7e0000ff9f
018d000002f6fffd0000fe820000ff1004cd00320000ff580000ff580000
ff640692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba045a002a039a00360435ffba0327ffba034d007902b400230242
003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b101f4006d
067f00140776001401f9009b0000fed902bc000003f2009b045afff504ce
fff5045a005304ce004a045a005304ce004a045a005304ce004a045a0053
04ce004a045a005304ce004a045a005304ce004a04350071043500ad045a
000f04ce000f0473001406110014054000a7047300860540000a0473000a
05c7005105c700660400005005c7fffd067a00140540004a047300460474
00480556006e04d5005304e3ffc40639006d04fe000f070c008701c70083
0239001f055600960400008801c7001504000018072000a405c7ffb80473
008b0639006006f200630557004406090014047300860556009e0556006b
0400004f04f20094030b00440239002404e300140239002404e3003005fb
006105c700a1062e00140400002104e300290400002804e3002904e30031
045c0044045c003f0473003c0473005503ab003203e50024047300870214
00bc034e00bc04ac0072023900b00aaa009e09c7009e08640046087f0096
06aa0096039c008309c7009c078e009c062b0087047300550556fffd0473
004a0000fefe0556fffd0473004a08000001071d00440639006d0473001a
0639006d0473004205560096040000880639006304730044063900630473
004404e30029045c004c01c7ffa20aaa009e09c7009e086400460639006d
04730042084600a404f2009e05c7009c047300870556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b0239ff8a0239ff64
023900040239fff60639006304730044063900630473004405c700a102aa
ffcc05c700a102aa006805c700a10473007605c700a1047300830556005c
0400003f04e3003002390024045c0051037e001305c700a40473008705a6
00a404d6005e0486005e04e30029040000280556fffd0473004a055600a2
0473004b06390063047300440000fefd0639006304730044063900630473
004406390063047300440556000604000021047300570473004804730086
04730086040000130400005004730046047300460473005505e9005503ab
004903ab0032050d0032040f00440239ffb9047300420473004204780050
0402001904ef00190473008b047300870473008701c7001901c7008901c7
0089029e0000026e001401c700830493008306aa008406aa008406aa0087
0473ffa60473008b046c00870473004406530044063f00570466004402aa
ffe402aaffe402aaffe402aa008502aa008502aa008502aaffe40455008a
0455008a0400003f01c7ffa20214ffb901c7ff7202cb00000239000f0239
002404730019048c0044046000880400001a05c700060400001804280019
0400002804540028045c004c045c00790400002404000050040000240400
00500639006304400088040f004904780050046b0088032e000004000008
033b008804730048040000240400005007b7004607400046080b004605b3
0024036f002405c00024061c0013054a0083050f008303e2001e04380063
03110064031100640146ffce01eb006401eb000001eb000002ea006403d9
0000029100000187005a02d7005e01c7008001c7006c01c7008a02aa00fb
02aa00fb02ca003202ca003204ac007004ac007004ac006504ac006502aa
012102aa00de02aa005902aa012102aa001d02aa005902aa00de023900b6
023900b602aa00fb02aa00fb02aa00a602aa00a602aa00a602aa001d02aa
ffe202aafffb029400000142006402b8003202a0000002ca003203100096
0310009603100096031000960310009602aa006202aa006202aa002802aa
001d02aa0047045700960457009604570096045700960457004304570043
045700430457004304570043031000430457002f0457002f0457002f0457
002f0457002f0310002f0457002504570025045700250457002504570025
0310002f0457001a0457001a0457001a0457001a0457001a0310001a0457
004204570042045700420457004204570042031000420457009604570096
045700960457009604570042045700420457004204570042045700420310
00420457002f0457002f0457002f0457002f0457002f0310002f0457002f
0457002f0457002f0457002f0457002f0310002f04570026045700260457
002604570026045700260310002604570042045700420457004204570042
045700420310004204570096045700960457009604570096045700420457
004204570042045700420457004203100042045700260457002604570026
045700260457002603100026045700230457002304570023045700230457
0023031000230457002f0457002f0457002f0457002f0457002f0310002f
0457004b0457004b0457004b0457004b0457004b0310004b045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457001a0457001a0457001a0457001a0457001a0310001a0457
002404570024045700240457002404570024031000240457002f0457002f
0457002f0457002f0457002f0310002f0457004e0457004e0457004e0457
004e0457004e0310004e045700960457009604570096045700960000fec1
0000fec60000fdac0000fed80000ff920000fee90000ff4c0000fea00000
fec40000ffce0000ff660000fea00000fed80000fed80000ff970000ff98
0000ff990000fff40000ff420000ff420000ff440000ff5f0000fe870000
ffec0000ffa60000ff510000ff510000ff510000fec90000ff1c00000000
0000fee90000ff4c0000ff930000ff2a0000ff560000ffce0000fe870000
febb0000fec40000fec40000fed80000fed80000feb30000fec90000fdad
0000fdac0000feb30000fec90000fdad0000fe160000fee60000ffa60000
fe870000ff440000feba0000ff230000ff9a0000fdac0000fe8800000000
0000feb00000ff980000fe930000ffa60000fe870000fdac0000ff660000
ff440000feb00000feb00000feb00000ff030000ff520000fd1f0000ff53
0000ff530000ff530000feb50000feb50000ffc30000feae0000fedc0000
fec70000fec80000fedc0000fe1e0000ff420000ff510000feb70000feb0
02aa00de02aa005902aa00fa049a008c04600088062e001407aa0000062e
0014047b004c063f005704cf0044063900630473004405c7006604000050
04e300a8033b008804ff0000043c0032060d000a049d0042072000a406aa
0084056500630473008b056400a40400000a0556006b0556006b04e00005
04c5001905e5005f046e004403b600140347002804cf00440495005b0400
005001c7ffa2063900600389004d03890050055600a205c000a10473004b
047800870ab4006d04fe00100639001404e70014079900bf05b500880558
000b0400001a072e00bf0590008806a10078057b007a086d00bf06f00088
04d5006603ab001f065f0039058200480639006004730044066d0009050c
001a066d0009050c001a0b010063091c004406aa005c04e600440987006d
06d000500000fe370ab4006d04fe001005c7006604000050040700140000
fea60000febc0000feaa0000fead0000fc2b0000fc4c05c000a104780087
05400004042b00140556009e04730087055d00a40464008804d5004e03ab
003204a900040380000005ef002904490028070900a4052f0088091800a0
06f6008806060066042b005005c700660400005004e3003003aa00260767
00310587002605550057042b004506e4000a0554000a06e4000a0554000a
023900bf07630007055afffb055700a1046800860540001204ab001805c7
00a4046b008805c700a4046b008805550057042b004506aa00980580008c
02aa002e0556fffd0473004a0556fffd0473004a08000001071d00440556
00a20473004b060500630473005507630007055afffb04d5004e03ab0032
04d5004e045c004c05c000a10478008705c000a104780087063900630473
0044063900600473004405c0004a0415002b0515000a040000210515000a
040000210515000a0400002105550057042b0045071500a805c0008b0540
004a0473004607bf004a0703004607a6006606860053054d006604130053
07c3001207470018084600a4070700880639006d0478005005f900300553
00260000ff430000fec90000ff770000ffb00000ff470000ff560000ff74
0000fed70000feac000000000000ff520000ff56000000000000feac0000
fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac0000ff7f
0000ff560000fdef0000ff430000ff690000ff7c000000000000fdae0000
ff8c000001020000fefe0000fefe0000fedf0000fedf0000ff580000ff20
0000fefe0556fffd0473004a055600960473008605560096047300860556
00960473008605c700660400005005c7009e0473004605c7009e04730046
05c7009e0473004605c7009e0473004605c7009e04730046055600a20473
004b055600a20473004b055600a20473004b055600a20473004b055600a2
0473004b04e300a8023900130639006d0473004205c700a40473008705c7
00a40473008705c700a40473008705c700930473006805c700a404730087
0239ffdf01c7ff9202390020023900060556009604000088055600960400
008805560096040000880473009601c7007e0473009601c7ffb904730096
01c7ffa50473009601c7ffa306aa009806aa008706aa009806aa008706aa
009806aa008705c7009c0473008705c7009c0473008705c7009c04730087
05c7009c0473008706390063047300440639006304730044063900630473
004406390063047300440556009e047300870556009e0473008705c700a1
02aa008505c700a102aa008505c700a102aa005e05c700a102aa00260556
005c0400003f0556005c0400003f0556005c0400003f0556005c0400003f
0556005c0400003f04e300300239002404e300300239002404e300300239
ffff04e300300239000e05c700a10473008305c700a10473008305c700a1
0473008305c700a10473008305c700a104730083055600090400001a0556
00090400001a078d001905c70006078d001905c70006055600090400000f
055600090400000f055600060400002104e300290400002804e300290400
002804e3002904000028047300870239000305c70006040000210473004a
01c7008904a0004804a0004804a0004804a0004804a0004804a0004804a0
004804a000480556fffd0556fffd06820013068200130682001306820013
068200560682005603910062039100620391006203910062039100620391
0062061e0000061e0000076c0000076c0000076c0000076c00000473008b
0473008b0473008b0473008b0473008b0473008b0473008b0473008b068f
0000068f0000081f0000081f0000081f0000081f0000081ffff3081ffff3
01c7008101c7008101c7ff9b01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7
ffa20301000003010000049100000491000004910000049100000491fff3
0491fff3047300440473004404730044047300440473004404730044069d
0000069d0000082d0000082d000007c9000007c900000460008804600088
0460008804600088046000880460008804600088046000880682000007ae
00000812000007ae0006063f0057063f0057063f0057063f0057063f0057
063f0057063f0057063f0057065f0000065f000007ef000007ef0000078b
0000078b0000078bffff078bffff04a0004804a000480391006203910062
0473008b0473008b01c7ffe601c700680473004404730044046000880460
0088063f0057063f005704a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a000480556fffd0556fffd06820013068200130682
00130682001306820056068200560473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff3063f0057063f0057063f0057
063f0057063f0057063f0057063f0057063f0057065f0000065f000007ef
000007ef0000078b0000078b0000078bffff078bffff04a0004804a00048
04a0004804a0004804a0004804a0004804a000480556fffd0556fffd0556
fffd0556fffd0556fffd02aa00e502aa00fd02aa00e502aa000602aa0006
0473008b0473008b0473008b0473008b0473008b068200000682000006f3
000006f3000005c700a402aa001302aa001302aa000601c7ffbb01c7ffab
01c7ffca01c7ffca01c7ff9301c7ff930239001a0239fff5036500000365
000002aa001302aa001302aa000604600088046000880460008804600088
048d0083048d00830460008804600088055600060556000606e600000718
0000061e000002aaffea02aaffea02aa0059063f0057063f0057063f0057
063f0057063f005707650000069d000007270000065f000005fb006102aa
00de02aa00e50473000d05c7006605c7006606aa008705c70024095000a1
078d00190556001f04e30030080000290400003004c100660000ff530000
ff530000ff530000ff5301c7001901c7ffa2042b00050556001105740046
02cbffa3057a008702f0ffc8057f000a057f000a02aa008402aa008402aa
00c902aa00c902aa00a002aa005902aaffaf02aa003a02aa0006023900b9
02aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa003a0000
ff730000ffa50000fed80000ff230000ff720000ff720000fee70000ffa5
0000ff530000ff530000ff530556009e0473008703f8001905fb0019071d
00440440001904000050046900870469001903eb008703ab003201c70088
0361004104000088033600100580008c04780087047300440400001304de
004404de004404de000d078d005003a800440473004404730044042b0084
0455001f0455001f03aa00260460008804c6004405de004404c600440400
001a05c700060400002803ab0032036b003f04db001f02eb00880400001a
04550088042b008405b4007a04ab001803a00000054f0000035100320351
ffd103980032034800320348003203f80032036e0032015600690284002d
0366003202d000320415003203710032036f003204180032030f00320359
0032039c003203760031036f003204fb000002fa003202fa003203040032
04cc0032030500640305003202f9003202f90032028c0032028c00320304
00320142006402b6006404950064030f00640305003202d5003203050032
030500320306006401c20032030f00640342003204950064029200000320
00000315006402920000030600320385003202bf00000142006401eb0064
030f0064029200000315006402920000030900320385003202bf000005ed
00460a660046061300460689ffba0541ffba01e9003c045a00110000ff0d
0000ff350000fece0000feb70000fec90000ffcf0000ff4f0000ff9e0000
feca02b3005f02b3005f03e9004a03e9004a039affba0327ffba039affba
0327ffba05ad0069053d002d05fd009604dc005004e0003c05f6009b053f
00280650002804ac00720000fe3b0000fe660000fe660473fffc02aa0053
02d5ffce01a8ffba01a8ffba01a8ffba01a8ffba0658001509c500470400
000008000000040000000800000002ab0000020000000155000004730000
02390000019a000000ab00000000000005e5000305c7006606aa00980580
008c0744008307180046071800480556fffd05c70066040000140473000a
04e300300400004f0400002804a5001d000001020000ff420000febf0000
ff3a0000ff53048d000a05c7005105c7006605c70051045500a102eb0088
0000ff430000ff040000ffac02d200960000ff37021affba0250001e0000
ff3a0000ff5b0000ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a
05b5003a01f4ff9601f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba02b3003202b3003202b3
005f02b3005f03e9004a03e9004a0692003e0692003e043fffba043fffba
045a002a039a00360435ffba0327ffba045a002a039a00360435ffba0327
ffba045a002a039a00360435ffba0327ffba064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba02b4002302b400230327ffba0327ffba02b4002302b4
00230327ffba0327ffba043500450435004501f4ffba01f4ffba04350045
0435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba040d
0047040d004701a8ffba01a8ffba03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0473ff93047300460239ffbf06aa
ffd50473ffb70473ff9102aaffa402aaffa40400ffff0239ffb904000028
04730089030b0064047400480649002401c7001901c700190473001e0460
001e048c000a04730086047300460239001305b400420400008801c7fffc
06aa00870473008b0473008702aafffb0400003f0318ffa20400001a0400
000f040000280473004a04730048047300460473004b03ab004903ab0032
0534005501c700880400001301c7ffa204730083045c004c0304006402d5
003202c9003302fc0032028c003201d5003201d500000304003203110064
01420019014200640142006401420019022a000001420064014200090233
00640493006404930064030fffc9030f0064030e00640305003203000032
02b800320142ffca01c20032030f001d031a00320306006402d400640292
000002de003202de003202de003202f4003202ea00320000febc0000febc
0000ff730000fea9023900b902fa003202f900320305003202a0000002f9
00320639006d0556fffd0473000f05c7006602aa004104a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a0004801c7ff9b01c7
ffab01c7ff9b01c7ffab01c7ff9b01c7ffbb01c7ff9b01c7ffbb04600088
0460008804600088046000880460008804600088046000880460008801c7
ffab01c7ffab01c7ffbb01c7ffbb04600088046000880460008804600088
045a005304ce004a03a000130556001105c700290558000b055600a20473
004b0400003301c7ffa205e600630473004805c7000002aa000f05560006
0400002104000013040000500400001301c700830455fffd02eb00010556
00090400000f055600090400000f04d5005303ab00490540001204ab0018
0000fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff720000
ff730000fee7078b000a03eb004c040000130473000a01c700150473fff4
0556001105c700a1047300190239ff8b05c700a404730087055600960400
008804e30029040000280400003b049e00a403670088053000480000ff53
0000ffbc0000fefe0000fefe0000fea40000fea401c70088000000000000
002a0000002a0000002a0000002a000000d60000017e00000320000005a6
0000074e000009380000097e000009fe00000aa400000b8400000bec0000
0c6400000caa00000ce600000d5600000f1200000fee00001218000013f2
000015520000170c000018e20000198e00001c2200001e5600001eb20000
1f7000001ff200002062000020e8000021da000023da000025840000271c
000028560000299e00002a6200002b1800002ca800002dae00002e920000
2f7a000031b00000323a000035640000370e000038420000394800003b3c
00003da800004052000041000000422400004398000045d6000048e20000
4a8800004bc800004c3200004c9c00004d0000004d8800004dbc00004e38
0000510a000052e80000549c000056500000580e0000596200005b520000
5cf600005dea00005f020000619a00006296000064c60000668c0000684e
00006a1200006ba800006cae000070560000717a00007318000075360000
79a000007bc400007e1c00008004000081020000814e00008250000082f0
0000833c00008370000083ac000083ee000084540000849a000084ce0000
85040000853a0000858a000085cc0000861e00008656000086a8000086de
0000871e000087600000879e000087e800008828000088560000888e0000
88de00008914000089540000898e000089d200008a1c00008a5800008a88
00008acc00008b0400008b9400008c1a00008e2800008fbc0000916c0000
91b80000924c00009470000096c4000098b4000099a000009a2200009a8c
00009baa00009d0600009f4e0000a0b00000a13e0000a1e80000a2ac0000
a3f40000a59e0000a68c0000a7520000a7b60000a8240000a94e0000aa72
0000ab020000ace40000af3e0000b2900000b3860000b42c0000b47c0000
b5320000b6520000b7f00000b88a0000b94e0000ba0e0000ba760000bab2
0000bb0a0000bb580000bd700000bfb60000bfee0000c0200000c14a0000
c2760000c3240000c3c80000c46a0000c53c0000c5900000c5c60000c61e
0000c7700000c7e20000c83c0000c9b40000cb200000cc000000cc320000
ccce0000cdf20000d0680000d0a20000d0e60000d1220000d1840000d1c6
0000d20c0000d2580000d28a0000d2de0000d31c0000d34c0000d38a0000
d3d00000d4120000d4500000d4d20000d5400000d6260000d6620000d6e2
0000d7160000d7b80000d8400000d8ac0000d90e0000d97a0000da660000
db580000db8c0000dbc00000dbf00000dc340000dcac0000de260000e040
0000e0720000e0ac0000e1a60000e3340000e36a0000e4ce0000e54a0000
e62a0000e7200000e8b00000ea1a0000ec080000ed040000ed4a0000ed7e
0000edc00000edfa0000ee4e0000ee960000eee00000ef100000ef400000
f1280000f1660000f18e0000f1be0000f1f20000f2180000f23e0000f286
0000f43c0000f5b60000f5dc0000f6020000f6460000f6760000f6a60000
f6fc0000f7da0000f8ec0000f9300000f9660000f9c00000f9fe0000fa32
0000fa620000fa9e0000fade0000fb1c0000fb580000fb9a0000fbd00000
fc0c0000fc4c0000fc720000fc960000fce60000fe420000fe980000fecc
0000ff1a0000ff660000ffa80000ffe0000100160001005e000101000001
029c00010464000105e6000107d80001092a00010aae00010b9000010d2a
00010d9400010dbc00010e5a000110dc0001111c0001115c0001119c0001
11da000112380001129600011304000113240001140e000114ae000114e4
000115320001157c000115c6000115e2000115fe0001161e0001163e0001
165e0001167e000116a4000116ca000116f000011716000117460001176e
00011796000117c2000117ee000118220001184c00011878000118ae0001
18d8000119040001193a000119640001198e000119c2000119f200011a26
00011a6a00011a9a00011ace00011b1000011b4400011b7600011bb80001
1bec00011c1c00011c5e00011ca200011ce800011d4400011d6000011d7c
00011d9800011db400011dd000011f3e000121ea0001245a000124760001
2490000124ac000124c8000124e4000125000001255c0001259600012600
000126ca0001276a00012840000128c000012948000129b800012a4e0001
2aac00012af200012b5000012bb200012c6a00012d2800012d5400012db0
00012df400012f60000130540001307e0001309a000130c6000130fe0001
314a0001318a000131be000131ee0001321e0001324e00013292000132c2
000132f2000133320001336200013392000133c200013402000134320001
346200013492000134b8000136bc000136ec0001371c0001386c00013a22
00013a5200013a8000013ab000013ade00013b0e00013b3c00013b600001
3b8400013bb400013d2400013d5c00013d8c00013f1e00013f4c00013f7a
00013fa800013fd00001412e000142c6000142fe0001433e0001437a0001
43aa000143d8000143f4000144240001445400014544000146ac000146dc
000147160001475600014786000147b6000147f80001481e000148440001
4884000148c4000148f40001493400014a1e00014a9e00014b8200014bb2
00014be200014c1200014c4200014c7e00014cb000014ce200014d120001
4d4200014d8800014dba00014dea00014e2000014e9200014ec600015094
000151960001532600015556000157a6000159380001599c00015a260001
5a3600015ac400015cc200015dee00015f5a0001604a000161ce000163e8
000166140001670600016716000167260001683e0001684e0001685e0001
686e0001687e0001688e000169ac000169bc000169cc00016a4000016a50
00016b2000016b3000016c4200016c5200016c6200016c7200016dd00001
6fae00016ff0000170260001705c0001708c000170bc0001711000017138
000172c20001740a0001755e000176c60001784a000178ae00017a400001
7b5c00017b6c00017b7c00017d0200017d1200017e7800017fd200018106
00018264000183d200018598000185d800018610000186460001866c0001
869c000186c200018838000188680001899e000189ae000189be00018a00
00018a1000018ba400018d5000018eda00018f0200018f320001908e0001
909e000191d6000191e600019280000193e0000193f000019656000197e0
000199480001997800019aee00019c2000019c3000019c4000019c500001
9d2a00019d3a00019d4a00019d5a00019e5200019fcc00019fdc0001a104
0001a2380001a38a0001a51e0001a63c0001a7c80001a8da0001a9100001
ab460001abe60001abf60001ad8c0001af2e0001afb20001b1340001b144
0001b3ac0001b52c0001b6ac0001b6dc0001b87c0001ba020001bbc60001
bcf20001bd020001be320001be420001be520001bf120001bf220001c108
0001c1180001c24e0001c35c0001c5080001c6be0001c8000001c9700001
cab80001cb0a0001ccec0001ce680001cea60001d04c0001d0700001d1b0
0001d1c00001d1d00001d2080001d2180001d3a40001d50c0001d6800001
d6a40001d6d40001d8420001d8f40001d9b20001d9e00001db960001dc8e
0001dd1c0001de420001def00001dfc40001e00e0001e0860001e1460001
e16e0001e1b20001e2080001e2e40001e32e0001e3620001e38a0001e3b2
0001e3e60001e42a0001e46e0001e4ac0001e5ea0001e6a20001e7c20001
e8380001e9060001e9580001e9ea0001ea9a0001eb8e0001ebe20001ec78
0001ed360001ee200001eed20001eff20001f0440001f0ee0001f2240001
f2fc0001f3e20001f4e80001f5ce0001f6b00001f7a40001f8420001f948
0001fa420001faba0001fb320001fba80001fbde0001fc3a0001fd020001
fd8e0001fdc60001fe0c0001fe3c0001fea60001ff660001ff9a0001ffca
0001fffe0002002e0002005e0002008e0002022e00020266000202a60002
02de00020316000203b2000204ac000204dc00020580000205ae000205ee
0002063e0002066e000206ba00020852000209b800020b1800020b5e0002
0bb200020bea00020d5c00020d9200020e2400020e6200020e9000020ece
00020ffe0002102600021162000211f20002129c0002131e000213da0002
14f20002160000021634000216ba0002181600021898000218e2000219ec
00021a3400021b3800021bb400021c0c00021c9000021d7a00021e900002
1f8c0002203600022126000221f8000222e2000223ca0002247a000224fc
0002275a00022784000227ae0002286600022890000229d200022ad80002
2bc200022bec00022c1600022c4000022c6a00022c9400022e1400022e3e
00022e6800022e9200022ebc00022ee600022f1000022f3a00022f640002
2f9800022fc200022fec0002301600023190000231a0000232ba000232ca
000232f40002331e00023348000233720002351c00023738000238660002
3876000239f200023a0200023b4800023d1400023e1a00023f9a0002413a
0002435e000244b80002469a000247de0002490c000249fa00024a240002
4a4e00024a7800024aa200024acc00024af600024b2000024b4a00024b74
00024b9e00024bc800024bf200024c1c00024c4600024c7000024eac0002
50280002516c000253540002549c000254c6000254f00002552000025550
000255a0000255f000025630000256a2000256f600025754000257aa0002
57e00002582200025868000258b2000258e20002591a0002594a00025a82
00025dc800025df200025e1c00025e4600025e7000025e9a00025ec40002
5eee00025f1800025f4200025f6c00025f9600025fc000025fea00026014
0002603e0002606800026092000260bc000260e6000261100002613a0002
61640002618e000261b8000261e20002620c0002623600026260000262fe
000263140002633e0002661e0002662e000267480002686a000269a80002
6aea00026c9000026ca000026de200026f3200027122000272f60002740e
0002741e000274a00002752e0002762e0002763e000276de000276ee0002
78040002795600027a8600027a9600027b6400027b7400027cea00027cfa
00027e0e00027e1e00027f52000280e8000281a4000281b4000282b20002
840c00028498000284a8000285d20002875e0002881a0002882a000288c6
000288d6000289a4000289b400028a8c00028a9c00028ba400028bb40002
8d7a00028d8a00028ee200028ef20002915c0002916c0002936600029376
000294e0000294f0000295e0000295f00002978800029798000298b60002
98c600029a0600029a1600029a2600029a3600029bae00029bbe00029bce
00029bde00029d3000029e7e00029f4c0002a0300002a1b00002a3320002
a4320002a5460002a68a0002a69a0002a7880002a8620002a9fe0002aa0e
0002ab2c0002ac320002ae300002ae400002ae500002ae600002afaa0002
afba0002b0720002b0820002b1900002b1a00002b28c0002b29c0002b3ba
0002b3ca0002b4680002b4780002b4880002b5760002b6ea0002b8160002
b9100002b9200002b9300002b9400002bade0002bc980002bd660002bd76
0002bfd60002c21c0002c4a20002c7060002c98a0002cbfc0002cdcc0002
cf820002cfac0002cfd60002cfe60002cff60002d0200002d04a0002d074
0002d0840002d0940002d0be0002d0e80002d0f80002d1080002d1320002
d15c0002d1860002d1960002d1a60002d1b60002d1c60002d1d60002d1e6
0002d2100002d2200002d2300002d25a0002d2840002d2ae0002d2d80002
d3020002d32c0002d3560002d3800002d3aa0002d3d40002d3fe0002d428
0002d4520002d47c0002d4a60002d4d00002d4fa0002d5240002d54e0002
d5780002d5a20002d5cc0002d5f60002d6200002d64a0002d6740002d69e
0002d6c80002d6f20002d71c0002d7460002d7700002d79a0002d7c40002
d7ee0002d8180002d8420002d86c0002d8960002d8c00002d8ea0002d914
0002d93e0002d9680002d9920002d9bc0002d9e60002da100002da3a0002
da640002da8e0002dab80002dae20002db0c0002dbac0002dbf00002dc66
0002dc900002dcba0002dce40002dd0e0002dd380002dd620002dd8c0002
ddb60002dde00002de0a0002de340002de5e0002de880002deb20002dedc
0002df060002df300002df5a0002df840002dfae0002dfd80002e0020002
e02c0002e0560002e08a0002e0be0002e0f20002e2840002e4200002e5bc
0002e7480002e78e0002e7d40002e8420002e89e0002e8f00002e9600002
ea380002eb040002ebdc0002eca80002ed480002ee620002ef160002ef98
0002eff20002f0320002f1500002f29a0002f4320002f48e0002f4ec0002
f5480002f5a40002f6580002f70e0002f7ba0002f8660002f9120002f9ca
0002fa820002fb3a0002fb4c0002fb5e0002fb700002fb820002fb940002
fc020002fc700002fd280002fd3a0002fd4c0002fd5e0002fd6e0002fd80
0002fd920002fda40002fdb60002fdc80002fdda0002fe880002ff340002
ffe20003008e00030126000301600003018a000301b4000302080003025a
000302d6000303200003039c000303f000030474000304c60003053c0003
0594000305fa00030650000306aa0003072800030774000307d200030836
00030884000308d20003092a000309720003099c000309ca000309f00003
0a2400030a5400030a8400030ad600030b4400030b9a00030c0e00030c62
00030cd600030d1c00030d8400030dca00030e2600030e5600030e900003
0eb600030ee600030f0c00030f3200030f6400030f9400030fe60003104c
000310a2000311080003115c000311ca0003120c0003126c000312ae0003
12fa0003133400031370000313aa000313e60003141a0003144c0003147c
000314ac000314d6000314fc00031526000315540003157e000315ca0003
160e0003164400031680000316b4000316e200031720000317500003178a
000317b4000317e2000318080003182e0003185a000318b6000318e60003
1916000319460003197e000319b2000319e000031a1000031a4000031a70
00031aa000031ad400031b2a00031b5e00031bbe00031bf200031c4a0003
1c7e00031cda00031d7800031e4600031f660003202e000320be00032154
000323400003253c000326b400032830000329da00032b8c00032c740003
2daa00032ea200032fb4000330d20003320800033372000334e000033676
000337f2000339020003391200033a3e00033b7a00033cbc00033e400003
3f1a00033f9000034046000340ec0003425c000342940003430e000343d0
0003448a000344f2000345f80003472e000347fa00034958000349d20003
4a4c00034b1800034bd200034c8600034ce200034d3c00034d8400034df4
00034e7000034eba00034ef400034f3a00034f7e00034fd0000350220003
50a40003512600035168000351a8000351de000352140003524200035270
000352a4000352d80003531a0003535c00035398000353d40003540e0003
54480003547a000354ac000354de000355100003554a00035584000355c6
000356080003564a0003568c000356da000357280003576a000357ac0003
57ec0003582c00035866000358a0000358ec0003593800035976000359b6
000359fc00035a4200035a7e00035ad400035b1000035b4c00035b8c0003
5bcc00035c0800035c4400035c8400035cc400035d0800035d4c00035da0
00035e2e00035e7000035eb200035f1a00035f8200035fb400035fe60003
601e00036056000360ec00036182000361cc00036216000362520003628e
000362e40003633a00036384000363ce000364260003647e000364be0003
64fe000365360003656e000365b800036602000366400003667e000366c0
0003670200036756000367aa000367f0000368360003687c000368c20003
69180003696e000369c400036a1a00036a6600036ab200036afe00036b4a
00036bbe00036c3200036ca600036d1a00036d5800036d9600036dd40003
6e1200036e5000036e8e00036ed200036f1600036f6200036fae0003700e
0003705a00037098000370e6000371f60003724600037296000372ce0003
73060003735c000373b2000374260003748a000374cc0003750e00037564
000375b2000375fe0003764a0003768a000376ca000377120003775a0003
77c6000378200003785800037890000378d000037910000379e000037adc
00037b9c00037c8a00037ce000037d3600037d8800037ddc00037e400003
7ea400037efa00037f5000037fc60003803c0003807e000380c000038102
0003814400038186000381c80003821e00038274000382c60003831a0003
83a200038424000384c400038566000385a4000385e2000386200003865c
0003869a000386d80003871600038752000388360003892200038a380003
8b5400038c1e00038ce800038de200038edc00038fda000390d8000391f6
000393140003943a000395600003966200039764000397f6000398880003
98c6000399040003995e000399b8000399f000039a2800039b3800039b48
00039b9000039bd800039c3000039c8800039cba00039cec00039d2e0003
9d7000039daa00039de400039e2800039e6c00039ee400039f5e00039fee
0003a0320003a0720003a0f40003a1760003a2ce0003a2de0003a32c0003
a37a0003a3b60003a3f20003a4380003a47e0003a4cc0003a51a0003a56a
0003a5ba0003a6160003a6720003a7e80003a9500003a9880003a9c20003
aa0e0003aa5a0003aaac0003aafe0003ab500003aba60003abe20003ac1e
0003ac740003acc80003ae000003aea00003aeee0003af2e0003af680003
b0fe0003b3820003b4460003b5dc0003b73a0003b8080003b9ae0003bc02
0003be3a0003be800003beb20003bf5c0003c0800003c0a40003c13e0003
c24a0003c35a0003c46a0003c5780003c6fe0003c7300003c7d20003c7fa
0003c85c0003c8be0003c9200003c9820003c9c00003c9fe0003ca380003
ca720003ca9e0003caea0003cb240003cb5e0003ccba0003ce0e0003ce1e
0003cedc0003d0120003d0700003d1880003d3160003d3bc0003d5020003
d5400003d57e0003d5bc0003d6100003d6380003d6920003d6f60003d73e
0003d7a00003d8000003d8720003d8ee0003d96a0003d9ec0003da780003
db040003db8e0003dc0e0003dc480003dc840003dde80003deb20003dee2
0003df120003e04a0003e19a0003e1aa0003e2980003e36c0003e4640003
e55a0003e6dc0003e8360003e8460003e95e0003ea0a0003eb4c0003eca2
0003ecfe0003ee5c0003eeea0003f0900003f2020003f3160003f34e0003
f3b20003f5620003f6cc0003f72e0003f8960003f99c0003fa520003fafe
0003fc260003fd140003fdf40003ff34000400600004017a000402ea0004
046400040474000405540004064a000406fa000407f6000408a2000409ac
00040a9800040bc200040ce600040dea00040f1800041056000411c20004
12f80004148c000416340004172c000418400004197200041a6400041a9c
00041af200041ba000041bb000041c1200041c6e00041cd400041d200004
1d6000041d9800041dc400041df200041e2c00041f6200041f960004201a
000420d00004210000042184000421b4000421ec00042384000425100004
255a00042594000425ea000426360004265c00042682000426c400042706
0004274800042778000427b0000427e60004281c0004285e0004288e0004
28be000429b400042ab800042aec00042b2400042b6a00042b9e00042bce
00042c0600042c3a00042c6e00042c9e00042cce00042d0400042d3a0004
2d6a00042d9a00042dce00042e0200042e3200042e6200042e9c00042ed0
00042f0200042f3400042f6800042f9c00042fcc00042ffc0004302a0004
305800043166000432d2000434060004353a0004356a000435a40004363e
000437a800043904000439c800043adc00043b0c00043b4000043c380004
3de800043e4000043eb800043ff400044032000440a4000440d400044104
0004413e000441c6000441f600044226000443b6000445000004460c0004
471a000448460004499c00044af800044c5800044d9200044f0400045064
000450740004522a00045352000453ec0004557400045584000456800004
58060004595e00045a1000045ae000045bec00045c9600045cce00045cde
00045d8e00045e3400045eb000046000000460f4000461ea000462f60004
63ce000464a80004653c0004664e000467de000468fc000469f200046a9c
00046b4600046c1000046cb800046d8e00046e0a00046e6600046fc80004
70fc000472980004735a0004745a00047532000476700004771c000477e6
000478d6000479fc00047ad800047bde00047d1600047e0600047ea40004
7f960004810600048250000484bc0004858e000486420004871000048804
000489420004895200048a8600048b9800048ba800048cb400048de40004
8e3800048fac000490d4000491e80004939a000495ae00049842000499fc
00049b2800049d0800049eca0004a05c0004a1280004a2c40004a33a0004
a3e80004a4c40004a5500004a5f20004a6940004a7780004a8b00004ab0c
0004ac540004ac640004ac740004acd60004ad340004ad960004ae340004
aecc0004afd00004b0be0004b0ce0004b0de0004b1780004b2120004b24e
0004b2ca0004b33e0004b3940004b3c80004b44e0004b4da0004b5520004
b5b00004b64a0004b6dc0004b75c0004b7de0004b8720004b8a60004b908
0004b9ba0004bb800004bbb80004bd940004bea80004beb80004beee0004
bf320004bf760004bfba0004bff00004c0220004c0640004c1000004c156
0004c1fc0004c2740004c2fa0004c36a0004c3cc0004c4520004c4b20004
c51c0004c5900004c6000004c65e0004c7040004c79c0004c8080004c898
0004c8f60004c9640004ca0c0004cab80004cb4e0004cbb80004cc3a0004
cc9e0004cd4a0004ce020004ceae0004cf3c0004cf980004d0040004d05a
0004d0dc0004d15a0004d1e00004d26c0004d2c60004d3320004d3a20004
d4120004d4820004d5060004d5960004d5fc0004d6760004d6f20004d76a
0004d8100004d8ac0004d93c0004d99a0004da380004dab40004db460004
dbe80004dc920004dd2a0004dd860004dddc0004de440004deea0004df92
0004e05c0004e1020004e1640004e1bc0004e21c0004e2aa0004e3300004
e3be0004e41e0004e4820004e4ec0004e5540004e5bc0004e63a0004e6c2
0004e7560004e7c20004e82a0004e88e0004e9360004e9f00004ea9e0004
eb2c0004eb8a0004ebf60004ec660004ed0c0004edb60004ee780004ef1a
0004ef7e0004f00e0004f0800004f1100004f18e0004f20a0004f2760004
f3040004f3600004f3be0004f4440004f4c00004f5280004f58c0004f5e0
0004f64e0004f6b60004f7340004f7aa0004f8240004f8a40004f9000004
f9660004f9ca0004fa6a0004fb0c0004fbc20004fc720004fcce0004fd46
0004fda40004fe2e0004fec60004ff560004ffbc0005001a000500a80005
011a000501ae00050246000502b6000503260005039e000503fc0005045c
000504d60005053000050590000505ea00050646000506ae0005073c0005
0772000507aa0005083600050860000508a20005093600050a2400050ab4
00050aea00050b3a00050bac00050c5800050cea00050d4200050d9c0005
0df400050e4e00050ed200050f5800050ffc000510a4000510e200051152
000511e60005127e00051314000513be000513f000051440000514940005
14da0005157e000516080005168e000516ee000517320005178000051820
000518b000051950000519f600051a9c00051b6000051b9200051bbc0005
1c4200051cf200051d2400051d4c00051e1a00051e7800051f1200051f60
00051fc60005206e000520dc00052142000521ce00052240000522b60005
236a000523c40005243400052470000524c200052548000525a80005264c
0005272c00052854000529e400052a4000052a9600052dbc00052e560005
2eb200052efa00053068000531ba000532000005330e000533a6000534b4
000535be0005366000053748000537da000538760005396800053a680005
3ae400053b6a00053bb200053d2400053e8000053f6400053fb400053fe8
000540d6000541fe00054398000544c8000545de000547120005482e0005
489c0005493000054a7000054b2600054c9000054dc000054ef20005501e
000550ca0005519000055262000553bc0005553c0005566c000557880005
594200055a9400055b8000055c5c00055d1e00055e8800055fd800055fe8
00055ff800056008000560c000056176000561b2000561e8000562200005
6256000563e2000565f6000566e0000567f80005697000056ade00056bc8
00056cfa00056e4200056fc800057166000572ba000574a80005766e0005
78a400057af200057bda00057cb600057dfe00057f800005806800058182
000581c40005820e0005842a000586420005878e0005890400058b620005
8d6400058de800058e1800058e6400058f2c00058ffc0005919000059218
00059280000592c0000592fe000594b0000596e000059816000599f80005
9ad400059bee00059d9a00059fa60005a0a80005a1940005a3860005a58e
0005a6fa0005a87e0005a9de0005ab4c0005abda0005ac6a0005ad840005
ae900005b0520005b1be0005b3ae0005b5780005b60c0005b6a80005b73e
0005b7c60005b8ac0005b9840005bb1e0005bcb00005bcd60005bcfc0005
bd0c0005bd3c0005bd6c0005bee60005c0880005c1320005c2140005c2d4
0005c37e0005c4180005c4fa0005c5b80005c6940005c84a0005c9840005
ca100005ca400005ca700005caa40005cad80005cae80005caf80005cb28
0005cb580005cb8c0005cbc00005cbf40005cc280005cc5c0005cc900005
ce0a0005ce1a0005ce4a0005ce7a0005ceb20005cee60005cf1a0005cf4e
0005cf820005cfb60005cfea0005d0220005d0580005d0880005d0c80005
d1000005d1480005d18e0005d1c20005d1f60005d2300005d2680005d308
0005d3180005d46a0005d6320005d7d80005d9820005dace0005dbe40005
dcf20005de080005df020005dfea0005e10c0005e2080005e2e00005e3d0
0005e48c0005e53e0005e6080005e67a0005e7200005e7b00005e8140005
e9220005e9880005ea360005eb2c0005eb940005ebfc0005ecac0005ee86
0005ef8a0005f00a0005f0480005f0f40005f1820005f26a0005f3020005
f3680005f4660005f5280005f5e20005f6200005f6b00005f7b20005f846
0005f88a0005f9a80005fad20005fcb40005fe760005ffac000600da0006
01da000602020006022a0006026000060292000602be000602e60006030e
0006033c0006039a000604080006044000060478000604a8000604ce0006
0502000605380006055e00060584000605b2000605e00006060c00060682
000606aa0006070c00060732000607580006077e000607a4000607d40006
0804000608340006086e0006089e000608d400060904000609360006095c
00060982000609b6000609ec00060a1c00060a4c00060a7200060a980006
0abe00060aec00060b2000060ba600060bea00060c2400060c5800060c9c
00060cd600060d1000060d3600060d6000060dac00060dee00060e140006
0e4200060e6800060e8e00060ece00060f0000060f3000060f6000060f86
00060fac00060fdc0006100c00061032000610580006107e000610a40006
10ca000610f000061118000611a0000611ca0006123e00061266000612dc
000613040006136600061398000613ca000613fa00061432000614640006
1492000614cc000614f40006155400061596000615c6000615f200061622
000616520006167a000616a2000616ca0006172c00061754000617b20006
17f60006183a0006186a000618a0000618c6000618ee000619140006193c
000619620006198a000619b2000619dc00061a0200061a2800061a4e0006
1a8000061aa800061b2e00061b5800061bc200061bf200061c2200061c48
00061c6e00061cc600061cf600061d3200061d5c00061d8c00061dbc0006
1df000061e2400061e5400061e9400061ece00061f1600061f3c00061f62
00061f8800061fae00061fd4000620140006205400062090000620c00006
20f0000621200006215000062188000621c000062200000622400006227a
000622b4000622f00006232e00062378000623c2000624080006244e0006
2490000624d20006250200062532000625660006259a000625d40006260e
0006265a000626a6000626fe00062756000627ae0006280c0006283c0006
286c000628a2000628d80006290e0006294a0006297e000629b200062a06
00062a5a00062aae00062b0200062b5600062baa00062c0200062c5a0006
2c8800062cb600062ce800062d1a00062d6000062da600062dd800062e0a
00062e5c00062eb400062ef800062f3c00062f8000062fc4000630180006
306c0006309c000630cc000631020006313800063176000631bc00063210
0006325a000632ac000632fe0006335e000633be000633ee000634200006
345a00063494000634e60006353a00063584000635cc0006360e00063678
000636c6000637120006374400063776000637aa000637de000638140006
384a00063888000638be000638f00006392c00063982000639d800063a36
00063a9400063aea00063b4000063b7400063ba400063be800063c1e0006
3c4e00063c9200063cd000063d0800063d4000063d7600063db200063de2
00063e1e00063e5e00063ea400063eee00063f3a00063f8600063fdc0006
403200064080000640ce0006411c0006416c000641c8000642240006427c
000642d4000643280006437c000643be0006440000064448000644900006
44d8000645260006456a000645ae000646140006467a000646e000064746
000647ac000648120006487c000648e60006492e00064976000649be0006
4a0600064a5200064a9e00064af200064b3e00064b8200064bd000064c38
00064ca000064d1000064d8000064de800064e5000064e9000064ece0006
4f1800064f4200064f8800064fc00006500e0006503e0006506e000650aa
000650de000651040006515800065196000651ea000652d0000653f80006
543a00065460000654b6000654e60006552800065570000655be00065608
000656580006567e000657660006584a0006599c000659ca000659f80006
5a8c00065b1200065b4000065bca00065bfa00065c2a00065c7800065cc6
00065daa00065e8600065fca00065ffa0006602a000660c0000661480006
6178000661a8000661d80006626800066298000662c80006631a00066362
000663b80006644e000664e60006655a000665ac000665d60006662c0006
6660000666aa000666e20006673200066770000667bc000667e20006685e
000668b0000669c200066bcc00066d8000066f0200067074000673160006
75e6000677a6000678ec00067b4600067c8800067e9e00067ef000067f40
00067f9600067fec0006804e000680d600068324000684b6000686c20006
87de0006899200068b1400068bd400068cb600068d1e00068d8000068df6
00068e5e00068f0a00068f7a0006900a0006911e000691e20006922e0006
92c40006937000069414000694be000695080006954a000695c000069628
000696b800069766000697d0000698340006989a00069954000699ea0006
9a4800069a7200069a9c00069aac00069abc00069b7e00069c8200069e8c
00069fe200069ff20006a0a20006a1860006a1e60006a1f60006a2520006
a2b00006a3d00006a4be0006a4ce0006a4de0006a4ee0006a4fe0006a5e4
0006a6e40006a8bc0006aa780006ab7e0006abf80006ac720006ad240006
ad340006ae420006ae520006ae620006af240006b0580006b1440006b154
0006b1640006b1740006b2da0006b4460006b5720006b5820006b5920006
b5a20006b5b20006b6940006b6a40006b8060006b9100006ba0e0006bb46
0006bc180006bc960006bd140006be340006beb00006befc0006bf880006
c09c0006c0f00006c2320006c2f20006c3be0006c4b40006c5be0006c670
0006c7d60006c83c0006c9000006cb020006cc900006ce0e0006cf3e0006
d1f00006d3320006d4600006d5d80006d7500006d8d00006da5e0006dc10
0006dc7e0006dde20006df1a0006e01e0006e1540006e2860006e3560006
e4260006e5820006e65c0006e6fc0006e8000006e92a0006ea280006eba8
0006ed120006ee500006efc80006f1140006f1f60006f25e0006f3000006
f3a00006f49e0006f6060006f7400006f8d40006fa1e0006fb020006fb60
0006fc660006fcfc0006fdbe0006fe640006fea400070050000701220007
01e800070310000704b0000705bc00070614000707ac0007083a0007084c
0007087c000708ac000708e40007091c000709520007098e000709c40007
0a0000070b6e00070bb800070c5200070cea00070d6400070de800070e4e
00070efa00070f46000710660007111c000711f20007122a000712680007
12dc000713d6000714f4000715f6000716380007167a000716e8000716f8
000717080007171800071728000717380007174800071758000717680007
17780007178800071798000717980007191c0007192c000719ec00071ab2
00071be800071dde00071fe0000721dc00072412000726120007267e0007
27900007292200072a7a00072b2c00072b7000072c0e00072d3e00072d8e
00072e2400072f6000072f70000731260007325a000732aa000733000007
33c20007340600073448000734ce0007352c0007361e000736ac000736e2
0007375c000737d4000738240007393000073a2600073ad000073afa0007
3b2400073b4e00073b7800073bb800073bf800073c3000073c6800073cb2
00073cfc00073d3c00073d7c00073dc600073e1000073e5000073e900007
3eea00073f4400073f7e00073fb800073ffc0007404000074084000740c8
0007411c00074170000741bc00074208000742460007428a000742da0007
432a00074384000743e20007440c00074436000744d00007456a000745ae
000745f2000747080007471800074760000747a8000747fa0007484c0007
48b60007490a00074956000749b400074a3e00074aa200074ae600074b30
00074b9800074be200074c2200074c6a00074ca600074ce200074d1e0007
4d5800074d9a00074ddc00074e1c00074e5c00074ea600074ef000074f46
00074f9e00074fec0007503a0007507c000750ca0007510c000751560007
5198000751dc0007523800075294000752e00007532c00075376000753c0
000753fe0007543c000754ba0007553800075572000755ac000756460007
56e0000757b400075888000758e400075940000759b400075a2800075b86
00075b9600075c8000075c9000075cc600075cfc00075d3600075d700007
5dac00075de800075e2e00075e7400075fda00076190000762dc0007649a
00076610000767b8000768e8000769ee00076c0c00076d5000076ee60007
706e000770ec0007723000077438000774cc00077560000776b4000777de
0007795800077a9800077c0400077cf200077ebc00078050000780d20007
8204000782ee0007845600078538000786ee000787e00007894200078a7e
00078b7200078d3600078ebe00079062000791c600079362000795200007
96a600079742000798b6000799a800079a9000079c1000079d6200079e82
0007a01a0007a1f00007a37e0007a4280007a4de0007a6900007a7340007
a7c20007a80e0007a85a0007a8d20007a9b00007aa2a0007aacc0007ab20
0007ac840007adb00007aec20007afc40007b08c0007b2000007b3400007
b5660007b6100007b73a0007b83e0007b9de0007baca0007bbc40007bcc2
0007bda80007bec20007c07c0007c22a0007c3980007c4100007c4840007
c5a20007c6260007c7280007c8b40007ca2c0007cb620007cc6c0007cde2
0007cf5a0007d14c0007d33a0007d5000007d5740007d6240007d6da0007
d78a0007d8480007d9420007da460007db400007dc4c0007dcd40007dd62
0007ddea0007de7e0007df5a0007e0500007e1340007e22a0007e2be0007
e37a0007e40e0007e4cc0007e5bc0007e6c40007e7c20007e8d60007e9f8
0007eb0c0007ec4c0007ed860007eea80007efbc0007f1000007f2540007
f4680007f61a0007f6ce0007f7ea0007f8c00007f9de0007fabc0007fc50
0007fd0a0007fda60007fe980007ff800008006c000800ea000801e40008
03220008044e00080482000804c6000804d600080576000806180008070e
000807fa000808d4000809ac00080b0a00080c6a00080d0800080d9e0008
0ddc00080e1c00080e5a00080e9a00080ef400080f4c00080fa60008100a
0008109600081292000812e20008140e0008149400081514000815ee0008
16c2000817c6000819b200081aca00081b3a00081bca00081c8c00081d5e
00081dca00081e4800081f9c00081fe2000820280008210c000821480008
21a6000821e4000822160008225a0008229c000822cc000100000d3500f2
003c009d000700020010002f005600000468041d0005000200>
<0000003a02be0000000300000000006a00000000000300000001000a006a
0000000300000002000e00740000000300000003005e0082000000030000
0004000a00e00000000300000005001800ea0000000300000006000e0102
000000030000000700ba01100000000300000008003001ca000000030000
0009008a01fa000000030000000d02aa028400010000000000000035052e
000100000000000100050563000100000000000200070568000100000000
0003002f056f00010000000000040005059e0001000000000005000c05a3
0001000000000006000705af0001000000000007005d05b6000100000000
00080018061300010000000000090045062b000100000000000d01550670
0003000104030002000c07c50003000104050002001007d1000300010406
0002000c07e10003000104070002001007ed0003000104080002001007fd
0003000104090000006a080d0003000104090001000a0877000300010409
0002000e08810003000104090003005e088f0003000104090004000a08ed
0003000104090005001808f70003000104090006000e090f000300010409
000700ba091d0003000104090008003009d70003000104090009008a0a07
000300010409000d02aa0a9100030001040a0002000c0d3b00030001040b
000200100d4700030001040c0002000c0d5700030001040e0002000c0d63
0003000104100002000e0d6f000300010413000200120d7d000300010414
0002000c0d8f000300010415000200100d9b0003000104160002000c0dab
0003000104190002000e0db700030001041b000200100dc500030001041d
0002000c0dd500030001041f0002000c0de10003000104240002000e0ded
00030001042a0002000e0dfb00030001042d0002000e0e0900030001080a
0002000c0e170003000108160002000c0e23000300010c0a0002000c0e2f
000300010c0c0002000c0e3b00a900200032003000300036002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0041
007200690061006c0052006500670075006c00610072004d006f006e006f
0074007900700065003a0041007200690061006c00200052006500670075
006c00610072003a00560065007200730069006f006e00200035002e0030
003100200028004d006900630072006f0073006f00660074002900410072
00690061006c00560065007200730069006f006e00200035002e00300031
0041007200690061006c004d00540041007200690061006c002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200069006e00200074
0068006500200055006e0069007400650064002000530074006100740065
007300200061006e0064002f006f00720020006f00740068006500720020
0063006f0075006e00740072006900650073002e0054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e004d006f006e006f0074007900700065002000540079
00700065002000440072006100770069006e00670020004f006600660069
006300650020002d00200052006f00620069006e0020004e006900630068
006f006c00610073002c0020005000610074007200690063006900610020
005300610075006e0064006500720073002000310039003800320059006f
00750020006d006100790020007500730065002000740068006900730020
0066006f006e007400200074006f00200064006900730070006c00610079
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
006400200062007900200074006800650020006c006900630065006e0073
00650020007400650072006d007300200066006f00720020007400680065
002000700072006f006400750063007400200069006e0020007700680069
006300680020007400680069007300200066006f006e0074002000690073
00200069006e0063006c0075006400650064002e00200059006f00750020
006d006100790020006f006e006c0079002000280069002900200065006d
0062006500640020007400680069007300200066006f006e007400200069
006e00200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
0065006d00620065006400640069006e0067002000720065007300740072
0069006300740069006f006e007300200069006e0063006c007500640065
006400200069006e0020007400680069007300200066006f006e0074003b
00200061006e006400200028006900690029002000740065006d0070006f
0072006100720069006c007900200064006f0077006e006c006f00610064
0020007400680069007300200066006f006e007400200074006f00200061
0020007000720069006e0074006500720020006f00720020006f00740068
006500720020006f00750074007000750074002000640065007600690063
006500200074006f002000680065006c00700020007000720069006e0074
00200063006f006e00740065006e0074002ea9203230303620546865204d
6f6e6f7479706520436f72706f726174696f6e2e20416c6c205269676874
732052657365727665642e417269616c526567756c61724d6f6e6f747970
653a417269616c20526567756c61723a56657273696f6e20352e30312028
4d6963726f736f667429417269616c56657273696f6e20352e3031417269
616c4d54417269616c20697320612074726164656d61726b206f66205468
65204d6f6e6f7479706520436f72706f726174696f6e20696e2074686520
556e697465642053746174657320616e642f6f72206f7468657220636f75
6e74726965732e546865204d6f6e6f7479706520436f72706f726174696f
6e4d6f6e6f7479706520547970652044726177696e67204f666669636520
2d20526f62696e204e6963686f6c61732c20506174726963696120536175
6e646572732031393832596f75206d617920757365207468697320666f6e
7420746f20646973706c617920616e64207072696e7420636f6e74656e74
206173207065726d697474656420627920746865206c6963656e73652074
65726d7320666f72207468652070726f6475637420696e20776869636820
7468697320666f6e7420697320696e636c756465642e20596f75206d6179
206f6e6c792028692920656d626564207468697320666f6e7420696e2063
6f6e74656e74206173207065726d69747465642062792074686520656d62
656464696e67207265737472696374696f6e7320696e636c756465642069
6e207468697320666f6e743b20616e6420286969292074656d706f726172
696c7920646f776e6c6f6164207468697320666f6e7420746f2061207072
696e746572206f72206f74686572206f7574707574206465766963652074
6f2068656c70207072696e7420636f6e74656e742e004e006f0072006d00
61006c006f00620079010d0065006a006e00e9006e006f0072006d006100
6c005300740061006e0064006100720064039a03b103bd03bf03bd03b903
ba03ac00a90020003200300030003600200054006800650020004d006f00
6e006f007400790070006500200043006f00720070006f00720061007400
69006f006e002e00200041006c006c002000520069006700680074007300
2000520065007300650072007600650064002e0041007200690061006c00
52006500670075006c00610072004d006f006e006f007400790070006500
3a0041007200690061006c00200052006500670075006c00610072003a00
560065007200730069006f006e00200035002e0030003100200028004d00
6900630072006f0073006f0066007400290041007200690061006c005600
65007200730069006f006e00200035002e00300031004100720069006100
6c004d00540041007200690061006c002000690073002000610020007400
72006100640065006d00610072006b0020006f0066002000540068006500
20004d006f006e006f007400790070006500200043006f00720070006f00
72006100740069006f006e00200069006e00200074006800650020005500
6e0069007400650064002000530074006100740065007300200061006e00
64002f006f00720020006f007400680065007200200063006f0075006e00
740072006900650073002e0054006800650020004d006f006e006f007400
790070006500200043006f00720070006f0072006100740069006f006e00
4d006f006e006f0074007900700065002000540079007000650020004400
72006100770069006e00670020004f006600660069006300650020002d00
200052006f00620069006e0020004e006900630068006f006c0061007300
2c0020005000610074007200690063006900610020005300610075006e00
64006500720073002000310039003800320059006f00750020006d006100
7900200075007300650020007400680069007300200066006f006e007400
200074006f00200064006900730070006c0061007900200061006e006400
20007000720069006e007400200063006f006e00740065006e0074002000
6100730020007000650072006d0069007400740065006400200062007900
200074006800650020006c006900630065006e0073006500200074006500
72006d007300200066006f00720020007400680065002000700072006f00
6400750063007400200069006e0020007700680069006300680020007400
680069007300200066006f006e007400200069007300200069006e006300
6c0075006400650064002e00200059006f00750020006d00610079002000
6f006e006c0079002000280069002900200065006d006200650064002000
7400680069007300200066006f006e007400200069006e00200063006f00
6e00740065006e00740020006100730020007000650072006d0069007400
7400650064002000620079002000740068006500200065006d0062006500
6400640069006e0067002000720065007300740072006900630074006900
6f006e007300200069006e0063006c007500640065006400200069006e00
20007400680069007300200066006f006e0074003b00200061006e006400
200028006900690029002000740065006d0070006f007200610072006900
6c007900200064006f0077006e006c006f00610064002000740068006900
7300200066006f006e007400200074006f00200061002000700072006900
6e0074006500720020006f00720020006f00740068006500720020006f00
750074007000750074002000640065007600690063006500200074006f00
2000680065006c00700020007000720069006e007400200063006f006e00
740065006e0074002e004e006f0072006d0061006c004e006f0072006d00
610061006c0069004e006f0072006d0061006c004e006f0072006d00e100
6c004e006f0072006d0061006c0065005300740061006e00640061006100
720064004e006f0072006d0061006c004e006f0072006d0061006c006e00
79004e006f0072006d0061006c041e0431044b0447043d044b0439004e00
6f0072006d00e1006c006e0065004e006f0072006d0061006c004e006f00
72006d0061006c004e0061007600610064006e006f0074006801b001a103
00006e00670041007200720075006e00740061004e006f0072006d006100
6c004e006f0072006d0061006c004e006f0072006d0061006c004e006f00
72006d0061006c000000b900540328b326181fd0bc032900e00329000203
29b22b1d1fb90327031db23b1f40b80323b31215320f412d03200001002f
0320000100200320006f032000af032000bf03200004005f031e00010010
031e007f031e0080031e00af031e00bf031e00d0031e00060000031e0010
031e0020031e006f031e009f031e00e0031e0006031d031cb2201f104127
0319007f03190002000f031700ef031700ff03170003001f0317002f0317
004f0317005f0317008f0317009f03170006000f0317005f0317006f0317
007f031700bf031700f00317000600400317b2923340b80317b28b3340b8
0317b36a6c3240b80317b2613340b80317b35c5d3240b80317b357593240
b80317b34d513240b80317b344493240b80317b23a3340b80317b3313432
40b80317b32e423240b80317b3272c3240b80317b312253280b80317b30a
0d32c04116031600d00316000200700316000102c4000f0101001f00a003
1500b0031500020306000f0101001f00400312b32426329fbf0304000103
0203010064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed00
64001fffc002edb30e11329f414a02e200af02e200bf02e2000302e202e2
02e102e1007f02e00001001002e0003f02e0009f02e000bf02e000cf02e0
00ef02e0000602e002e002df02df02de02de000f02dd002f02dd003f02dd
005f02dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc00010000
02dc0001001002dc003f02dc000202dc02dc001002db000102db02db000f
02da000102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3
b21f2532b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb9
0326031cb23b1f40bb0322003e00330322b225311fb80318b23c691fb802
e3b3202b1fa0413002d400b002d40002000002d4001002d4002002d40050
02d4006002d4007002d40006006002d6007002d6008002d6009002d600a0
02d600b002d60006000002d6001002d6002002ca002002cc002002d60030
02d6004002d6005002d6000802d0b2202b1fb802cfb226421f411602ce02
c70017001f02cd02c80017001f02cc02c60017001f02cb02c50017001f02
c902c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c6001002
c7002f02c5000502c1b324121fff411102bf0001001f02bf002f02bf003f
02bf004f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00ca
0800001f02b200e90800001f02a600a20800406a1f402643493240204349
3240263a3d3240203a3d329f209f26024026969932402096993240268e92
3240208e92324026848c324020848c3240267a813240207a813240266c76
3240206c76324026646a324020646a3240265a5f3240205a5f3240264f54
3240204f5432b8029eb724271f374f6b0120410f02770030027700400277
00500277000402770277027700f90400001f029bb22a2a1fb8029a402b29
2a1f80ba0180bc0180520180a201806501807e01808101803c01805e0180
2b01801c01801e0180400180bb0138000100800140b40180400180bb0138
00010080013940180180ca0180ad01807301802601802501802401802001
3740b80221b2493340b80221b2453340b80221b341423240b80221b33d3e
320f410f0221003f0221007f0221000300bf022100cf022100ff02210003
00400221b320223240b80221b3191e3240b80222b32a3f3240b80221b32e
3a326f414802c3007f02c3008f02c300df02c30004002f02c3006002c300
cf02c30003000f02c3003f02c3005f02c300c002c300ef02c300ff02c300
0600df02220001008f02220001000f0222002f0222003f0222005f022200
7f022200ef0222000600bf022100ef02210002006f0221007f022100af02
210003002f0221003f0221004f0221000302c302c3022202220221022140
1d101c102b1048038f1c010f1e014f1eff1e023700161600000012110811
b8010db6f70df8f70d00094109028e028f001d001f0290028f001d001f02
8fb2f91d1fb80198b226bb1f41150197001e0401001f013900260125001f
013800730401001f0135001c0801001f0134001c02ab001f0132b21c561f
b8010fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb
1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b801
01b21fba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e26
b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f
1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab2
1f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f
231eb80401b21f5537b80168402c07960758074f07360732072c0721071f
071d071b071408120810080e080c080a080808060804080208000814b8ff
e0402b000001001406100000010006040000010004100000010010020000
01000200000001000002010802004a00b013034b024b5342014bb0c06300
4b6220b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807
ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801ff
b101018e851bb0124358b900010111858d1bb900010128858d5959001816
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b901
f201f04544b901f101f045445958b9033e01f2455258b901f2033e445959
4bb8015653205c58b9002001f14544b9002601f145445958b9081e002045
5258b90020081e4459594bb8019a53205c58b9002501f24544b9002401f2
45445958b909090025455258b9002509094459594bb8040153205c58b173
244544b1242445445958b917200073455258b9007317204459594bb80401
53205c58b1ca254544b1252545445958b9168000ca455258b900ca168044
59594bb03e53205c58b11c1c4544b11e1c45445958b9011a001c455258b9
001c011a4459594bb05653205c58b11c1c4544b12f1c45445958b9018900
1c455258b9001c01894459594bb8030153205c58b11c1c4544b11c1c4544
5958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65
422b2b01b33b59635c456523456023456560234560b08b766818b0806220
20b163594565234520b003266062636820b003266165b059236544b06323
4420b13b5c4565234520b003266062636820b003266165b05c236544b03b
2344b1005c455458b15c406544b23b403b4523614459b347503437456523
456023456560234560b089766818b080622020b134504565234520b00326
6062636820b003266165b050236544b034234420b147374565234520b003
266062636820b003266165b037236544b0472344b10037455458b1374065
44b24740474523614459004b5342014b5058b108004259435c58b1080042
59b3020b0a124358601b2159421610703eb0124358b93b21187e1bba0400
01a8000b2b59b00c2342b00d2342b0124358b92d412d411bba0400040000
0b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59
b0102342b0112342002b7475737500184569444569444569447373737374
757374752b2b2b2b74752b2b2b2b2b737373737373737373737373737373
737373737373737373732b2b2b45b0406144737400004bb02a534bb03f51
5a58b1070745b040604459004bb03a534bb03f515a58b10b0b45b8ffc060
4459004bb02e534bb03a515a58b1030345b040604459004bb02e534bb03c
515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b752b2b2b2b2b2b2b435c58b9008002bbb301401e017400735903b01e4b
5402b0124b545ab012435c5a58ba009f02220001007359002b7473012b01
732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b2b0045694473
456944734569447374754569447345694445694445694473744569444569
44732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b73
7475732b7374757374752b2b2b742b2b000000>
[15785 15901 16277 16325 16277 16273 15933 16169 16277 15721 16361 15561 15973
16029 16305 15693 16345 16249 15893 15629 16365 15481 16245 16249 16357 16337
15821 15749 16345 15937 16257 16033 19077 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> ArialMT AddT42Char 
2 2430 11 <0001007cfe51026005d30010003d400a270f0100101207081010b80133b3
009f0e08b801334011079f0e5e0003100320030303ac119d8c182b10f65d
fdf6ed10f6ed003f3c3f3c3130015d012602113437363733060706070615
100101df95ce4d5abc8179273d232b012bfe51bc01f8010eeedafdfbd059
8a96bbbdfe1ffe20>ArialMT AddT42Char 
2 2558 12 <0001007cfe51026005d300100065400c2802281002090a1001001209b801
33b30a9f0301b80133b4009f035e0eb8fff0b4101002550eb8fff8b40f0f
02550eb8ffe4b40d0d02550eb8ffec400f0a0a02550f0e1f0e020eac129d
8c182b10f65d2b2b2b2bfdf6ed10f6ed003f3c3f3c3130015d1323001134
272627262733161716151002fd81012b2b223d277a81bc5a4dcffe5101e0
01e1bcb9968a5ad2fbfddaeefef2fe08>ArialMT AddT42Char 
2 3414 19 <00020055ffe7041105c00010001d0155b10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301bb4062019101c
b8fff0b202200bbeffe00016ffe00012ffe0000fffe0406204068702880b
880fc90e0509070b180245134c154a19431b54135c155c19521b6b076b0b
63136c156b19601b79027706760b7a0f870698079610c918da02d606d60b
db0f1a1a1e0405141e0d0d17730940212334300901000910090209901f11
7300b8ffc0400e212334200040000200901ec78b182b10f65d2bed10f65d
712bed003fed3fed3130015d71005d003838383838013838385959131012
363332161612151002062322272613101633323611102623220706556bd3
a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d30104013dac5fb3
feffdafefefec3ad98b7019dfe97eff00168016aee698600>ArialMT AddT42Char 
2 4078 21 <0001003c0000040705c0001e01c7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40363b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021b101c101d101e1006befff00007ffe000
08fff00009fff0401a1e0a10080606ca1c1a141c1c1a081c1a030102081a
1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb400f0102
0c0a7317d30000014021233401bb0281002000100138400c11b53f025f02
6f027f020402ba0224001f018fb18b182b10f65df4ed10f62b3c10f4ed00
3f3cfd3c3fedfd5de4111217390111121739870e2e2b0e7d10c401111239
313000383838380138383838005d015d7259592515212637363637363635
34262322060727363633321615140606070606070407fc37021725a39aef
a8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b93
9c8a13cfd9eaad58aabca4886131>ArialMT AddT42Char 
2 9178 36 <0002fffd0000055905ba0007000e0167b6010e0f10025502b8fff2b40f10
025502b8fff8b40d0d065502b8fff440590c0c0655090c0c0c0655050c0c
0c06552f10301067086809601088039010c905c606c010f0100b08055901
56025010680bb010f30cf30df30e09040c040d040e030b0a090504040c0d
0e080607070c09050408060c07010000b8fff8400f0c0c02550020070c14
07070c020303b8fff840150c0c02550320040c1404040c091e0505081e06
0306b80270400900080ce94002010202ba010b0001010b40120c20006507
03525004cf04df040390040104b80101400b500cc007df0c03900c010cb8
010140100f07cf07027f0780070207930fd6d7182b10f45d7119f45d71f4
5d7118ed10ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b2b
7d10c4872e182b2b7d10c401111239391139398710c4c40ec4c4870510c4
c40ec4c43130014bb00b534bb01e515a58b4040f030807bafff00000fff8
38383838590172715d2b2b2b2b2b2b230133012303210313210326270607
030233d10258ddabfd9ba1d901f19946221c3305bafa4601bcfe44025a01
96b9778d8b00>ArialMT AddT42Char 
2 11432 43 <000100a40000052205ba000b00d8b9000dffc0401a13153404031e090aa0
0ad00a020a0502020b0808050820070706b8ffeeb40f0f025506b8fff240
0b0d0d025506100c0c025506b8ffe040180b0b065506010c0c0655065d80
0d010d020b200120000100b8ffc0400a13153400201010025500b8fff6b4
0f0f025500b8fff6b40d0d025500b8fffa400b0c0c025500080b0b065500
b8fff7b40c0c065500b8fff840160d0d0655005d0c200d01200d500d600d
700d043b59182b5d7110f62b2b2b2b2b2b2b2b5d3cfd3c105df62b2b2b2b
2b3c10fd3c003f3c3f3c395d2f3cfd3c3130012b33113311211133112311
2111a4c202fac2c2fd0605bafda6025afa4602b3fd4d>ArialMT AddT42Char 
2 14402 51 <0002009e000004fd05ba000d001800b2402c65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e02010200081226080a0d0d025508100b0b06
5508b8fff4401b0c0c0655081a201a01201a011a180d2001200001002010
10025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c02
55000c0b0b065500b8fffab40c0c065500b8fff0400a0d0d0655005d193b
5c182b10f62b2b2b2b2b2b2b5d3cfd3c4e10715df62b2b2b4ded003f3f3c
fd3c12392f3cfd3c3130015d005d33112132171e02151402212111112132
36353426272623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe
8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>ArialMT AddT42Char 
2 15164 53 <000200a1000005ad05ba0018002201fc4021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17b8ffc040190b0b06551717
0021221e0201020018180f0f0e081e260e9c06b8ffe8b40f0f025506b8ff
f6b40d0d025506b8ffe040220c0c025506060d0d0655065d202470248024
03242218200120000100201010025500b8fff6b40f0f025500b8fff6b40d
0d025500b8fffa400b0c0c025500060b0b065500b8fff7b40c0c065500b8
fff8400a0d0d0655005d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd3c
105df62b2b2b2b19e418ed003f3c103c103c3f3cfd3c12392f2bfd3c103c
392f12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b
2b2b2b2b002b2b2b5d435c58400a08400f390f103a11123a2b2b2b590171
435c58b9000effde401a193911221939122219390e401c39102214391022
1f39102215392b2b2b2b2b2b2b5933112132161615140607161716171323
032e02272623231111213236363534262321a1028ac4cc7acad34d28554c
fff4c2556e572d214be101a185964e97a3fe3005ba4fc8799cd61d25244e
75fe710131848c380b07fd750333377947688600>ArialMT AddT42Char 
3 0 54 <0001005cffe704eb05d30030021540276303630473037404042527350339
1c430349074c1d451f44244627530359075c1d572889130e23b8fff2b410
10025524b8fff2b41010025525b8fff2b41010025526b8fff2b410100255
27b8fff2b41010025523b8fff6b40d10025524b8fff6b40d10025525b8ff
f6b40d10025526b8fff6b40d10025527b8fff640460d100255280d262402
24032725360f34234425452f5a20562355256c0b6a0d6b0e66146518790b
7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f9615
1eb10602435458402d2126121b261a09262901260000291a120432312600
650002000d2d791b891b021b25160d2d1e27250125051605b8fff4400c0c
0c0655051e2d091e1e1603003fed3fed2b1112395d1112391112395d1112
395d01111217392fed2fed2fed2fed1b402d25240e0d0b05211c1d1e1b08
070604030206012524220e0d0b06051e1b2d1a400c0c02558f1a011aed16
002d01b8ffc040120c0c02551001200150016001700190010601b801b040
132d1e1e1603051e2d091b261a4a092600290129b8ffeab40e0e025529b8
fff4400d0c0c0255291a32212612012612b8ffecb40e0e025512b8fff6b4
0d0d025512b8fff8400f0c0c02551254200001001931635b182b4e10f45d
4de42b2b2bed10ed4e10f62b2b5d4dedf4ed003fed3fed10fd5d2be410fd
5d2bf4111217391117391112393901121739593130005d712b2b2b2b2b2b
2b2b2b2b015d7113371e0233323636353426272624272626353436363332
161617072626232206151417160417161615140606232224265cb70d5fc8
7d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958
807a86fb9dc7fef39901d7106e8d5742734445672317612b37a3656fc164
69cc810e8b8e815b4f33336b283bb57675cf7374e900>ArialMT AddT42Char 
3 4240 68 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>ArialMT AddT42Char 
3 5440 70 <00010050ffe803ed043e001a015ab1020243545840340e7f0f010f0b0140
0050007000030004121c0b07181c040b010e1507080e0e0255070c0d0d02
55070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10c45d
3210c45d3231301b4047090c011f1c4313431753135317601360179b029b
039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509b60a
b50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa407930004000
5000600070009000a000e000f00009000f0f0b000004121c0b07181c040b
1c0f010f240e080d0d06550e221b000100240b2b1f010100010101400b0b
065501401010065501480c0c0655011a0d0d065501491c1524cf07011f07
3f0702070e0b0b0655070a1010065507120c0c065507311b34c4182b10f6
2b2b2b5d71ed10f62b2b2b2b5d724b53234b515a58b90001ffc03859ed72
f42bed72003fed3fed12392f11392f105de4105de43130005d71015d7159
011706062322001134123633321617072626232206151416333236033cb1
1defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf011d01
0aac010281afa11b6b6cc3d3d6c28200>ArialMT AddT42Char 
3 6312 72 <0002004bffe8041e043e0015001d015340171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc04010101006551001010195131c040b17400db8ffdcb40d0d02550d
b8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d
1a1fb8ffc0b32526341fb8ffc040411e2334301f011f163310240740242a
341f073f074f070307200b0b025507180c0c0255071c0d0d0255070e0b0b
0655071c0c0c065507160d0d065507191e3437182b4e10f42b2b2b2b2b2b
5d2b4dfde44e10712b2bf6712b2b2b2b4ded003fedfd5d2b2be43fed1239
2f5d3cfd713c011112393912393130015d005d2b2b2b0171720117060623
22001110003332001114072116163332360121262726232206035eba2cee
b9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897ca90156
17a3b4011f0103010c0128fedefef91020afba680195864368a6>ArialMT AddT42Char 
3 10918 83 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>ArialMT AddT42Char 
3 11776 85 <00010085000002c6043e001100c9403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04010333634f0000100002000
d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c0255
00060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c06
5500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfde4
105df472e4003f3f3fed11393911393901111239390010c9870e7dc43130
005d72015d33113315363633321707262322060706151185a23e693f5b5e
3e42423b5e141e0426a171483aa727473f6072fdd400>ArialMT AddT42Char 
3 12038 86 <0001003fffe803b1043e00300317407b042214223a094a09442456226522
7c098e098424a613ab2cc2030d09171a1817304b2cd617051b0255020210
32010a185c085c095c0a5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426
b4270f27262427242936245a0a590b64266428742374248024930a9c0c92
28972c9530a40aa90ca327a428b326c5261628b8fff4b40d0d065522b8ff
f4b40d0d065523b8fff4b40d0d065524b8fff4b40d0d065528b8fff4b40c
0c065522b8fff4b40c0c065523b8fff4b40c0c065524b8fff4b40c0c0655
1db8ffde40121e395a0827250c0a041a202615040b2e1d1ab802aa402219
2c0b0b02551f193f194f195f19af19cf19060f191f196f19df19041f198f
190219bd02550015000002aa0001ffc040140b0b025510014001021001d0
0102000110010201b8ffc0b314163401b8ffc040100e113401012e5c1d6c
1d021d1c150704b8fff4b40b0b025504b8ffe6b41010065504b8ffe64013
0f0f0655041c2e0b1f1a011a24194013183432b8ffc0402f0f0f02551918
0f0f025519180d0d025519160c0c025519201010065519200f0f06551910
0c0c065519160d0d065519b8025bb207242ab8ffc0b51c39d02a012ab8ff
e6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06552ab8ffeab60d
0d06552a1a32b8ffc04021272a346032c032023f32803202321001010124
00180d0d025500100d0d06550020b8fff4b40d0d025520b8fff4b4101006
5520b8fff440190f0f065520240f100b0b02550f160c0c02550f200d0d02
550fb8fffa40200f0f02550f0e0c0c06550f0c0d0d06550f22df00013f00
4f00020019313437182b4e10f45d714df42b2b2b2b2b2bed2b2b2b102b2b
ed724e105d712bf62b2b2b2b712b4dedf42b2b2b2b2b2b2b2b2bed72003f
ed2b2b2b3fed7112392f2b2b5d71722be410fd5d71722be4111239111239
0111121739313043794040272d1e2305142c261110121013100306220d20
1b000928071b01052d071b011e14201b00210e231b0022230d0c08290a1b
012827090a062b041b001f101d1b01002b2b103c103c2b103c103c2b012b
2b2b2b2a2b818181002b2b2b2b2b2b2b2b2b5d71015d72715d1337161633
323635342726272e02353436373636333216161707262623220615141716
1716171e02151406062322263fb20f897b7c78352593c6994f41382a9153
7dbd5a11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b726544
3d2318253249814e4779281f2b487b6718525c5237231c1d130a2433417c
5c5a9f57ac00>ArialMT AddT42Char 
3 12974 87 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/zero 19 def
/two 21 def
/A 36 def
/H 43 def
/P 51 def
/R 53 def
/S 54 def
/a 68 def
/c 70 def
/e 72 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
end
ArialMT /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 50 /two put
dup 65 /A put
dup 72 /H put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT /ArialMT findfont ct_VMDictPut
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef 
/two 14{/.notdef}rp /A 6{/.notdef}rp /H 7{/.notdef}rp /P /.notdef 
/R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 
10{/.notdef}rp /p /.notdef /r /s /t 139{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
502.14 426.9 mo
(HARPS)
[8.13852 7.51822 8.13849 7.51825 0 ]xsh
503.64 443.763 mo
(Spectra)
[7.53061 6.27847 6.27844 5.64673 3.14264 3.76288 0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
503.7 457.44 mo
(\(20 stars\))
[2.80106 4.68768 4.68765 2.34174 4.25623 2.3443 4.68768 2.80103 4.25623 0 ]xsh
259.5 114.48 mo
335.04 114.48 li
335.04 63.6 li
259.5 63.6 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 .2 colr
f
259.14 63.6 mo
259.26 63.3 li
259.5 63.2401 li
335.04 63.2401 li
335.28 63.3 li
335.4 63.6 li
335.4 114.48 li
335.28 114.72 li
335.04 114.84 li
259.5 114.84 li
259.26 114.72 li
259.14 114.48 li
cp
259.86 114.48 mo
259.5 114.12 li
335.04 114.12 li
334.68 114.48 li
334.68 63.6 li
335.04 63.96 li
259.5 63.96 li
259.86 63.6 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 3858 20 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>ArialMT AddT42Char 
2 5900 25 <0002004dffe7041505c0001d002a014fb10202435458401f0f011f015f01
03011b281e400d010d0d14051e1b05221e140d0a1e01002510b8fff44019
0d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f2b2b2bcd
2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b19014407
4015441944205a1254206b03640764086a1264207408751c8508861cd608
d4161107200d0d065527b8ffe0b40d0d065523b8ffe0400b0d0d06552120
0d0d065507b8ffe0b42720232021b8ffe04011281e400d500d020d0d141b
01d35f000100b802684009051e1b05221e140d01b80138401200b5257310
40212334301001001010100210b8fff0b70c0c065510902c0aba0138001e
013940163f175f176f177f170417160c0c065517160d0d065517b80224b3
2bc78b182b10f62b2b5deded10f62b5d712bedf4ed003fed3fedfd5de411
12392f5ded313001383838382b2b2b2b015d005d59010726272623220706
060736363332121514060623220011103736333216011416163332363534
2623220603fbb3182c496b564155620241bc67b4fd77d084e1fee49d89e8
adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed
7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>ArialMT AddT42Char 
2 7202 28 <00020055ffe7041905c0001e002a01aeb10602435458b70b1f1801002511
18b8fff6b40f0f065518b8fff4b40d0d065518b8fff040280c0c06551811
0c0d0d065511100c0c06551118112c2b0b281e0f0e1f0e4f0e030e0e1400
50010101b8ffc0400d1011065501041e1c0d221e1405003fed3fedc42b5d
3212392f5ded3201111239392f2b2b2f2b2b2b10cdd4cd10ddc531301bb1
0202435458b70b1f180100251118b8ffeab40f0f025518b8ffea402a0d0d
025518110c0c0c02551118112c2b0b281e0f0e1f0e4f0e030e0e14005001
0101041e1c0d221e1405003fed3fedc45d3212392f5ded3201111239392f
2b2f2b2b10cdd4cd10ddc531301b40343a1a4c1640235b16572366036c16
6d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e16ad
16033a2964060227baffe00023ffe0401821200620281e4f0e5f0e020e0e
1c221e140501d350000100b80268b4041e1c0d1fba0139000b0138401118
40212334301801001810180218902c01b80138b400b5257311b8ffc0400e
212334201140110211902bc78b182b10f65d2bedf4ed10f65d712beded00
3fedfd5de43fed12392f5ded31300138383838005d71015d595913371616
33323e023534270606232202353400333216121110020623222601342623
220615141633323670ad167c61537d50360136bb6db6fc0107c68fed7b7a
f1a2acda02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108d8
df01109afee3fef2fee7feb3aebf03349bb6c49c8cafaf00>ArialMT AddT42Char 
2 11694 44 <000100bf0000018105ba000300ccb5010200080205b8ffc0b3383d3405b8
ffc0b333343405b8ffc0b32d303405b8ffc0b328293405b8ffc0b3232534
05b8ffc0b31d1e3405b8ffc0b3181a3405b8ffc0402a0d103420059005af
050303200100008f00a000b000042f0040005000df00f000051220008f00
90000305b8ffc0400b0d0d025500181010025500b8ffecb40f0f025500b8
ffeeb40d0d025500b8fff640100c0c025500200b0b065500a204d659182b
10f62b2b2b2b2b2b5d435c58b2800001015d5971723cfd5d2b2b2b2b2b2b
2b2b3c003f3f313033113311bfc205bafa46>ArialMT AddT42Char 
3 6758 73 <000100130000028005d30017010d401e1409010f192f193019401970199b
0c9c0da90d081a0d280db019c0190419b8ffc040281a1f341d080d030c0f
1c0a0115022b1413040306000a9f140114ff134004172504000302920101
00b8ffc0b331383400b8ffc0402b1c1f3490000119400f0f025519400d0e
025500141010025500280f0f025500220e0e0255002c0d0d025500b8fff2
400b0c0c025500140b0b065500b8ffeab41010065500b8ffe6b40f0f0655
00b8fffab70c0c065500a31819bc01ba002100f6010a00182b2bf62b2b2b
2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced10eded5d003f3f3c3c3cfd3c
3fed391139313043794014101106090706080602061009121b0011060f1b
012b012b2a8181012b715d00723311233533353437363633321707262322
06151533152311b29f9f131a83764c5c1b38325244cfcf039a8c716b3446
57129d0a4660628cfc66>ArialMT AddT42Char 
3 8014 76 <000200880000013c05ba0003000700cd405e09360b0b02554f099009a009
b009c009df09f0090700091f09700980099f09b009c009df09e009ff090a
1f09010001070402030906037e0100060506040a0607250500049f04a004
b004c004e00406c004f0040200042004d004e0040404b8fff8b410100255
04b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8
ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e0847
50182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed0111123939
111239393130015d72712b133533150311331188b4b4b404ebcfcffb1504
26fbda00>ArialMT AddT42Char 
3 9202 79 <000100830000013705ba000300e3b605360b0b025505b8ffc0b337383405
b8ffc0b334353405b8ffc0b330313405b8ffc0b322253405b8ffc0402515
17340f051f059f05df05044f05df05f005031f0570058005ff0504010000
0a0203250100b8ffc0b337383400b8ffc040153335349f0001c000f00002
00002000d000e0000400b8fff8b41010025500b8fffa401d0e0e02550004
0c0c0255000a0b0b025500140b0b065500081010065500b8fffeb40d0d06
5500b8ffffb40c0c065500b8fffc400a0c0c0655004e044750182b10f62b
2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130015d71722b2b2b2b2b
2b3311331183b405bafa4600>ArialMT AddT42Char 
3 10014 81 <00010087000003e6043e0016017d40130503061302a810b810e303e713f0
03f6130604b8fff0403c0b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e2418401010025518400b0b02550b2810
1002550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02
550bb8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f
0f06550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0
401a343634b018f018027018a018b018c01804180302331516250100b8ff
f6b41111025500b8fffab41010025500b8fffa40170e0e025500040c0c02
55000a0b0b025500040b0b065500b8fffa40110f0f065500020c0c065500
040d0d065500b8ffc04012333634f0000100002000d000e00004004e1710
f65d712b2b2b2b2b2b2b2b2b2b3cfd3cf43c105d712bf65d712b2b2b2b2b
2b2b2b2b2b2b2b2bed3c103c003f3c3f3fed113901123931304379401606
11090a080a070a0306102611060e1b010f0a121b01002b012b2b2a81015d
71002b5d71331133153633321616171615112311342626232206151187a2
75dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e6d4192
ccfdbc00>ArialMT AddT42Char 
3 10468 82 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/one 20 def
/six 25 def
/nine 28 def
/I 44 def
/f 73 def
/i 76 def
/l 79 def
/n 81 def
/o 82 def
end
ArialMT /Encoding get
dup 49 /one put
dup 54 /six put
dup 57 /nine put
dup 73 /I put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two 3{/.notdef}rp /six 2{/.notdef}rp /nine 7{/.notdef}rp /A 6{/.notdef}rp 
/H /I 6{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/s /t 139{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
283.98 78.4797 mo
(Initial)
[3.14487 6.2807 2.51318 3.14487 2.51318 6.2807 0 ]xsh
270.782 95.3433 mo
(list of lines)
[2.51657 2.51657 5.6524 3.14825 3.12228 6.28409 3.14825 3.17871 2.51657 2.51657 6.28409 6.28409 
0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
275.16 109.02 mo
(\(2169 lines\) )
[2.79935 4.686 4.68597 4.686 4.68597 2.34174 1.86035 1.86035 4.686 4.686 4.263 2.79935 
0 ]xsh
139.98 318 mo
215.52 318 li
215.52 279.84 li
139.98 279.84 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .8 1 colr
f
139.62 279.84 mo
139.74 279.6 li
139.98 279.48 li
215.52 279.48 li
215.76 279.6 li
215.88 279.84 li
215.88 318 li
215.76 318.24 li
215.52 318.36 li
139.98 318.36 li
139.74 318.24 li
139.62 318 li
cp
140.34 318 mo
139.98 317.64 li
215.52 317.64 li
215.16 318 li
215.16 279.84 li
215.52 280.2 li
139.98 280.2 li
140.34 279.84 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
3 9454 80 <0001008700000626043e002301c7b9000dfff4b40d0d065508b8fff4b40d
0d065509b8ffd8404d0b0d342504e404e409e117e52005d505f620021708
202309181b20090303231e1c06151c0b0b06070106231a19100ad0250190
25a025022517171a0e2590110111041010025511180f0f025511b8ffec40
0b0e0e025511140c0c025511b8ffe840170b0b025511020b0b0655110c10
10065511060f0f065511b8fffab40c0c065511b8fff8b40d0d065511b801
5d400c1825901b011b180f0f02551bb8ffec400b0e0e02551b140c0c0255
1bb8ffee40110b0b02551b040b0b06551b0a101006551bb8fffe400b0d0d
06551b0c0f0f06551bb8fffcb40c0c06551bb8015d4016000233232501d0
00019000a000021f003f004f000300b8fffe401d0e0e025500100d0d0255
00100c0c0255000c0b0b025500160b0b065500b8fffcb41010065500b8ff
f440140f0f0655000a0c0c0655000e0d0d065500192425b80178b3214750
182b2b4ef42b2b2b2b2b2b2b2b2b5d71723c4dfde410f42b2b2b2b2b2b2b
2b2b5dedf42b2b2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f
3f3c4d10ed10ed11173901111239123931304379400e0c141326140c111b
01120d151b01002b012b2b81015d005d2b2b2b3311331536363332161736
3332161511231134262623220615112311342623220606151187a132a66a
76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258baafb6fd
27029d6c5f3a95a4fd9702b27878509a91fdd900>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/m 80 def
end
ArialMT /Encoding get
dup 109 /m put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two 3{/.notdef}rp /six 2{/.notdef}rp /nine 7{/.notdef}rp /A 6{/.notdef}rp 
/H /I 6{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t 139{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
158.82 294.66 mo
(Atomic)
[7.52835 3.14035 6.2762 9.40067 2.50867 0 ]xsh
149.04 311.523 mo
(parameters)
[6.29311 6.29311 3.77759 6.29312 9.41759 6.29311 3.15727 6.29311 3.77759 0 ]xsh
484.26 526.44 mo
559.8 526.44 li
559.8 475.5 li
484.26 475.5 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .8 1 colr
f
483.9 475.5 mo
484.02 475.26 li
484.26 475.2 li
559.8 475.2 li
560.04 475.26 li
560.16 475.5 li
560.16 526.44 li
560.04 526.68 li
559.8 526.74 li
484.26 526.74 li
484.02 526.68 li
483.9 526.44 li
cp
484.62 526.44 mo
484.26 526.08 li
559.8 526.08 li
559.44 526.44 li
559.44 475.5 li
559.8 475.86 li
484.26 475.86 li
484.62 475.5 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
505.92 490.38 mo
(Stellar)
[7.53177 3.14368 6.2796 2.51208 2.51202 6.2796 0 ]xsh
492.722 507.243 mo
(Parameters)
[7.54077 6.28857 3.7731 6.2886 9.41309 6.28857 3.15277 6.28857 3.77307 0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
504.06 520.92 mo
(\(20 stars\))
[2.80106 4.68768 4.68768 2.34174 4.25623 2.34424 4.68768 2.80103 4.25623 0 ]xsh
381.3 475.5 mo
381.42 475.26 li
381.66 475.2 li
457.98 475.2 li
458.28 475.26 li
458.34 475.5 li
458.34 526.44 li
458.28 526.68 li
457.98 526.74 li
381.66 526.74 li
381.42 526.68 li
381.3 526.44 li
cp
382.02 526.44 mo
381.66 526.08 li
457.98 526.08 li
457.68 526.44 li
457.68 475.5 li
457.98 475.86 li
381.66 475.86 li
382.02 475.5 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 12154 46 <000100960000055205ba000b01fe401e0322373908093a270a3506360a47
0a57038603d70307760ad903d90a0306b8fff440180d0d025528058c048a
05aa04ea08050a04013504d6040209b8ffe04009122134032012213403b8
ffdeb30c391209b8ffe0b312213408b8ffe0b312213404b8ffe0b31d2134
04b8ffc0b312163408b8ffde403d1939080925253d080919193d06060709
0a09080a0503040420050a1405050a090808200706140707060a0a000502
040102070b0800080a03020b010004b8023a400f300501a005b005c005e0
0504054a08b8023a400b30070120078007b0070307b80286400c0b202000
0100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffab4
0c0c025500b8fffab40c0c065500b8fff2400a0d0d0655005d0c3ba8182b
10f42b2b2b2b2b2b5dedfd5d71edf45d71ed103c103c3c3c003f3c3c3c3f
3c3c3c12392f87052e2b0e7d10c487052e182b047d10c40708103c083c01
4bb018534bb01b515a58b90004ffd83859b10602435458b90004fff0b30c
113403b8fff040170c113406100e113408100e103409100e11340a100d10
34002b2b2b2b2b2b593130012b2b2b2b2b2b2b435c58401109221939082c
1939042c193904221b3905b8ffdeb616390422163906b8ffde400b123908
2214390440143908b8ffdeb52539044015392b2b2b2b2b2b2b2b2b2b2b59
002b2b2b0171725d2b00715d2b2b33113311012101012101071196c202d8
0107fd990282ff00fdf6f005bafd2902d7fdaefc9802e6eafe04>ArialMT AddT42Char 
3 7594 75 <00010087000003e805ba00140161b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe0403a1719341708110c1114030501
000f1c0507140b0a0c250940333634ff0901c0090116400b0b0255164010
10025509281010025509140e0e025509b8ffec40110d0d025509040c0c02
55091a0b0b025509b8fff6400b0b0b065509141010065509b8fff8400b0d
0d0655090a0f0f065509b8fff6b60c0c0655094e16b8ffc04017343634b0
16f016027016a016b016ff1604160214250100b8ffc04010333634f00001
00002000d000e0000400b8fffab41010025500b8fffa40170e0e02550004
0c0c025500080b0b025500040b0b065500b8fffa40160f0f065500020c0c
065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b5d712b3cfd
3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed003f3c3fed3f1139
113901123931304379400e060e07250e060c1b010d080f1b01002b012b2b
81002b5d2b012b33113311363332161615112311342623220606151187b4
7ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1877b538e7dfdbb
>ArialMT AddT42Char 
3 13266 88 <00010083ffe803e004260018014fb9001affc0400915173402201316340f
b8fff040331214342b1301240813160c0113160b06000a111c030b003316
251817403336341a401010025517281010025517120e0e025517b8ffec40
0b0d0d025517040c0c025517b8fff4400b0b0b065517141010065517b8ff
f8400b0d0d0655170c0f0f065517b8fff6400d0c0c0655ff1701c0170117
4e1ab8ffc04015343634b01af01a02701aa01ab01aff1a041a0c2509b8ff
c04010333634f0090100092009d009e0090409b8fff8b41010025509b8ff
f840110e0e025509040c0c0255090a0b0b065509b8fff640160f0f065509
020c0c065509020d0d0655094e194750182b10f62b2b2b2b2b2b2b5d712b
ed105d712bf65d712b2b2b2b2b2b2b2b2b2b2b3cfde4003fed3f3f3c3939
0111123931304379401a04100e0d0f0d0206070806080508030610040c1b
000d08111b00002b012b2a2a81005d012b2b2b2135062322262627263511
3311141716163332363635113311033f7cd55ea34f100bb40b116e51518e
3bb49cb4486d4f35730292fdb38d314751538f880239fbda>ArialMT AddT42Char 
4 600 93 <00010028000003d40426000e01af400d12b802c9080212013212173408b8
ffce4009121734013e1e213408b8ffc2404a1e2134290228092f10390139
0a49014602460849094f105c01540254085a0950106c01630263086a097b
0174087b098b0185088909f901f4021b1908260129082b093908a508d701
0710b8ffc0b7101534022c123909b8ffd44023123901023a090a02080a0a
25010214010102010d0e08060261052b0706060a610d000db8fff440090b
0b06550d2b0e0a02b8010fb40808070506bb025b00000007fff440160b0b
065507220da00e01000e400e600e800ef00e050eb8fff440240b0b06550e
74000a7e0101af00014f006f00ff000300180b0b065500190f1074217cc4
182b2b4ef42b5d713c4d10ed10fd2b5d713ce42b10f43c103c10fd003fed
2b3c10e53f3cfde5113911123987052e2b877dc4100ec42b3130012b2b2b
715d002b2b2b2b435c58b5290126080201b8ffce40091217340832121734
01b8ffc2b71e2134083e1e2134002b2b2b2b017159015d435c58b90008ff
deb20f3909b8ffdeb20f3909b8ffe8b71b390908161b3d09b8fff0b21739
09b8fff8400a163902141639021a16392b2b2b2b2b2b2b2b593335010623
213521150107363321152802a47358fe4f0364fdc16f796a01eb92030806
9277fd5e7b099b00>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/K 46 def
/h 75 def
/u 88 def
/z 93 def
end
ArialMT /Encoding get
dup 75 /K put
dup 104 /h put
dup 117 /u put
dup 122 /z put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two 3{/.notdef}rp /six 2{/.notdef}rp /nine 7{/.notdef}rp /A 6{/.notdef}rp 
/H /I /.notdef /K 4{/.notdef}rp /P /.notdef /R 
/S 13{/.notdef}rp /a /.notdef /c /.notdef /e /f 
/.notdef /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u 4{/.notdef}rp /z 
133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
400.68 490.38 mo
(Kurucz)
[7.53174 6.27957 3.76407 6.27957 5.64789 0 ]xsh
386.524 507.243 mo
(Atmospheres)
[7.53964 3.15161 9.41196 6.28748 5.65579 6.28748 6.28748 6.28745 3.77194 6.28748 0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
401.94 520.92 mo
(\(20 stars\))
[2.80106 4.68768 4.68768 2.34171 4.25623 2.34427 4.68768 2.80106 4.25623 0 ]xsh
25.5 318 mo
101.82 318 li
101.82 279.84 li
25.5 279.84 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .8 1 colr
f
25.14 279.84 mo
25.2 279.6 li
25.5 279.48 li
101.82 279.48 li
102.06 279.6 li
102.18 279.84 li
102.18 318 li
102.06 318.24 li
101.82 318.36 li
25.5 318.36 li
25.2 318.24 li
25.14 318 li
cp
25.8 318 mo
25.5 317.64 li
101.82 317.64 li
101.46 318 li
101.46 279.84 li
101.82 280.2 li
25.5 280.2 li
25.8 279.84 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
48.84 294.66 mo
(Solar)
[7.53963 6.28747 2.51995 6.28747 0 ]xsh
34.379 311.523 mo
(Parameters)
[7.54076 6.2886 3.77308 6.2886 9.41308 6.2886 3.15276 6.2886 3.77308 0 ]xsh
138.66 419.76 mo
138.72 419.52 li
139.02 419.4 li
216.3 419.4 li
216.54 419.52 li
216.66 419.76 li
216.66 457.92 li
216.54 458.22 li
216.3 458.28 li
139.02 458.28 li
138.72 458.22 li
138.66 457.92 li
cp
139.32 457.92 mo
139.02 457.62 li
216.3 457.62 li
215.94 457.92 li
215.94 419.76 li
216.3 420.12 li
139.02 420.12 li
139.32 419.76 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
3 7098 74 <00020042fe5103ea043e001e002a016f40600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d403205
1c1c0f0a45221c0c0a16153325330a251818d01701101740176017801704
2c400b0c02552c400d0d025517121010025517b8fff440110f0f02551706
0e0e025517160d0d025517b8ffea400b0b0b065517121010065517b8ffee
b40c0c065517b8fffc404a0d0d065517740f012500221f24bf0fcf0fdf0f
ff0f041f0f3f0f4f0f030f200b0b02550f1a0c0c02550f220d0d02550f1c
0b0b06550f0c0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b
2b2b2b2b2b5d714dedf4ed10fd2b2b2b2b2b2b2b2b2b2b5d713c10fde4f6
3c003fede43fedfd5de43fede43f3c3130015d71005d7117171617163332
363736270623220235341236333217353311140606232226131416333236
35342623220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0
beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880
fc6af8cf78ab032ad1c0bfccc3c6c300>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/g 74 def
end
ArialMT /Encoding get
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two 3{/.notdef}rp /six 2{/.notdef}rp /nine 7{/.notdef}rp /A 6{/.notdef}rp 
/H /I /.notdef /K 4{/.notdef}rp /P /.notdef /R 
/S 13{/.notdef}rp /a /.notdef /c /.notdef /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u 4{/.notdef}rp /z 
133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
163.86 443.04 mo
(log)
[2.52446 6.29199 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: Arial-ItalicMT Initial
ct_T42Dict begin
-0.516 -0.324 1.379 0.996
 256 array 0 1 255 {1 index exch /.notdef put} for  /Arial-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32efe77db1000000cc000000606376
74203de628370000012c000005606670676d54bf6d360000068c000005ce
676c7966a0be9df300006f580005992e68656164d2cdf52500000c5c0000
0036686865610e710d3f00000c9400000024686d7478fd1423b100000cb8
000027506c6f63611b8fd5fe00003408000027546d6178700cbe03ce0000
5b5c000000206e616d65c0f7965a00005b7c00000d347072657048530f70
000068b0000006a667646972000000000000000000000000000203880190
00050008059a0533001e011b059a0533005a03d1006602120805020b0604
020202090204e0000aff000078430000000100000000544d432000010020
fffc05d3fe570133073e01b2400001bfdff70000042605ba000000200004
05ba001905ba001905a6001a042600180000ffe70000ffe80000ffe7fe69
ffee05ba0019fe6fffe202e2000000b5000000b5000000000000000000bc
00bf008c00b300a600a600b10010010400640079008b008b00c100ea008a
00a2009101b40073007a00a400a200bb01bd0270005a00800017007000c3
00300103ffd000ac007d010d0006001200c900cd00560091ff8f0113000b
00190043007200b903c803d7ffee0146016e0002001b0044005200b603ee
00d80104023d05180573ff2d0005000900c600cd024cffe7001100150037
0049004e005c00a600a700b500c500db01280543ffdf0021004000530070
0079008e00a300ca018f0265027502a403c80555ff9affd7ffee00050008
002600460069007000730077009a00c100ef010a011301c101e50318049c
fef2fef9ffa4000000270034004100450075008000c400cb00d900e500f8
01550166022b0254037004050467ff16ffb40002001d0032004a004a004d
00550060007c007f008c009d00b102a3038cfec4fef7000100030003002d
00370037003a0056005a00a400cd00da0111011901250127014801530169
01a001fb02070239028102a402f7030503280328033603a303b503dd03df
03f10448047804e6060bff28ff4bff68ff78ff9fffbfffe10012001f0028
004c005a005c005e00610070007700810083008800b1009c009c009d009f
00a500b600b800b900ba00d300df00e100f200f7010e0132013b013c0166
016c017801ae01b501b701cf01d2025d026102a202cd0323035a03a303a4
040004440450047304d2fe00fe38fe8cfeb1feceff0effb2ffc7ffecfffd
0005001f002100250026002d00580065008100850091009900a500ab00af
00b000b000ba00db00dc00e900f80109010901100114011701240129012d
012f013601500151015a0167017401790182018e01900199019c01b001b3
01b701be01c501da01e801f001f201fb02000200020b020f021f0222022c
022d022e024e02670287029002ac02b502bc02bc02d002d402d802db02e5
02f102f9031103140314032203260348034a035c036f03780379037e03ab
03b503cb03e004040405040f0428042c048404a504af04cf04eb04f9050b
058e0593059805e505e506000610063d06500668069506b806d907030751
0766077e077f078207b60800082308ac00b200bf00b100af000000000000
000000000000025c00a100d301be00de01a6031402ab015002a70196010e
0318006b039b01d1054b0089023c02b0014d021603f301760176001503a9
01f400f400b6020402d8012b04a701a000bc01bd028c026b0278040f0157
04a904fd017404d2040302e400a602ee00000000061404a7000002760000
016d013e00000267006d009e021400cb02a40085007100c2009e06090290
00b9008f00260248003501490091009902ef00eb008e0011013f006a0079
00fd01a3057402a1017a03e8020c005601fd02df013b0574006606100081
01b3024e03cb01e400cd02bc0132014b01680239016200fd00e601a201e6
0255004d028300a3046705d401dd012b014e05680070000004e003490366
021302bb0000000000000000000000000000000000af00b4000300cd004c
03c8005c0192007200cd022b0049026f009d03bd01e900b4017c04670368
0099027802040183028102ac00b30348040b004200b403b400be01a803d6
012b00af0478016e0193ff45fd5d00f506a604ae03b10536041cffcafedc
01a501d0ffba02f10037ffca0355fe67019c04190055007c00e50072006d
000b00ab012b009c00db01a60008012b00250056008e00a5001500100109
00cb00460017004c005e01f200b80083001101360128004e0222006b0241
072006140000072700aaff370037006e002901da04a8007500ba40415440
3f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c4523466020b02660b004262348482d2c452346236120b02661b0
04262348482d2c45234660b0206120b04660b004262348482d2c45234623
61b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d
2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d442359
20b0ed51582320b04d44235920b0042651582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01182f
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
3623701020b802364520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab902a502a58a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b202020243604259b12401885458b2022002436042004b01
4b5258b2020802436042591bb940000080885458b202040243604259b940
00008063b80100885458b202080243604259b94000010063b80200885458
b2021002436042595959592d000000010000000500008cb7dcfa5f0f3cf5
0819080000000000a372c2bf00000000c142e805fbddfd670b0907fb0002
0009000100010000000000010000073efe4e00430aaafbddfa520b090021
000700000000000000000000000009d40600010000000000023900000239
00000239007302d701150473005f04730069071d00c7055600a101870104
02aa00ad02aaff93031d00ec04ac00b80239003102aa005f023900760239
ff98047300910473012f04730078047300700473005d0473008e047300ab
047300f8047300990473008a023900750239003104ac00b804ac00b804ac
00b804730104081f006f0556ffd70556005905c700ba05c7005b0556005c
04e3005d063900c705c7005602390075040000440556005b0473005206aa
005a05c70064063900bb05560058063900bd05c700600556009004e300ff
05c700c6055600fe078d01000556ffbf055600ef04e300320239000d0239
00ae0239ff8803c100900473ff7e02aa012a0473005a0473004404000073
0473006c0473006a0239005d047300350473004401c7003d01c7ff080400
004601c7003606aa004304730044047300640473ffeb0473006902aa0044
0400004e0239007304730080040000a205c7009f0400fffd040000000400
002802ac006b021400bc02acff5404ac00a40556ffd70556ffd705c700ba
0556005c05c70064063900bb05c700c60473005a0473005a0473005a0473
005a0473005a0473005a040000730473006a0473006a0473006a0473006a
0239007d0239007d0239007d0239007d0473004404730064047300640473
0064047300640473006404730080047300800473008004730080047300ba
033301110473009a047300400473003e02cd006d044c008e04e3004a05e5
005305e500530800011802aa015a02aa00ed0464007c0800ffad063900ae
05b4009a0464007c0464007c0464007c0473004b049c000c03f4003805b4
007a069600f1046400000231000002f600a702ec008f062500bb071d0057
04e3009904e300ac02aa007604ac00b8046400540473002e0464007c04e5
001a047300a104730053080001260556ffd70556ffd7063900bb080000a4
078d00810473fffc0800000002aa00d802aa00d601c7010801c701000464
008003f4007804000000055600ef0156fde80473005102aa006102aa0021
0400006f0400006f0473000b023900b901c7fff102aaffd8080000880556
ffd70556005c0556ffd70556005c0556005c023900750239007502390075
02390075063900bb063900bb063900bb05c700c605c700c605c700c60239
007d02aa00cd02aa00c002aa00c902aa00db02aa018e02aa014802aa004d
02aa00b002aa004002aa01080473001801c70026055600900400004e04e3
003204000028021400bc05c7005b04730064055600ef0400000005560058
0473ffeb04ac00b804ac010502aa011702aa009802aa00a906ac007b06ac
00ab06ac00a90473ffe8063900c70473003502390075055600900400004e
05c700ba0400007305c700ba040000730473006c046b00b502aa01360556
ffd70473005a0556ffd70473005a05c7005b0500007005c7005b0556005c
0473006a0556005c0473006a0473005201c7003604730052024000380473
00520333003605c700640473004405c7006404730044063900bb04730064
05c7006002aa004405c7006002aa0044055600900400004e04e300ff0239
001b04e300ff02d5006d05c700c60473008005c700c60473008004e30032
0400002804e300320400002804900057063900bb06b200b4049000660472
00620384004504d3006402fe00b00538006f046bff7e0400007302eb0077
08c000190800004f040000990800004f040000990800004f040000980400
009807d5016a05c000ee04ac00b804d5009d04ac007104d5022204d50105
05abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e05ab
ffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905ab02d6
05ab006605abffea05d5ffff04d500920800000007eb013007eb012007eb
013007eb012004d500b204d5008004d5002a082b0198086b01b807550010
060000f40600006f0440003a0540003704c0003f04150040040000250600
005505de0075038d003b04eb00650180010402d50115071500b802960019
04d5009202d6008302d6008304d500b202d600700556ffd70473005a05c7
00ba0400007305c700ba040000730556005c0473006a0556005c0473006a
0556005c0473006a063900c704730035063900c704730035063900c70473
003505c700560473004405c70056047300440239007501c7003d02390075
01c7003d0239007501c7003d0239ffdc01c7ff960400004401c7ff080556
005b04000046040000460473005201c7ff6e05c700640473004405c90062
04730049063900bb04730064063900bb0473006405c7006002aaffc70556
00900400004e04e300ec0239001805c700c60473008005c700c604730080
05c700c60473008005c700c604730080078d010005c7009f055600ef0400
000001c700360556ffd70473005a0800ffad071d0057063900ae04e30099
02390128078d010005c7009f078d010005c7009f078d010005c7009f0556
00ef0400000001c7013302aa00990473004004cd005a06ac007b06ac0094
06ac009306ac006302aa002602aaffe002aa017b02aa00610556ffd4064f
006306c50068031c0062065a005706ec00600633001b01c7ffee0556ffd7
05560059055effec0556005c04e3003205c70056023900750556005b0556
ffec06aa005a05c7006405300008063900bb05cc00570556005804cc002d
04e300ff055600ef0556ffbf06a500fd0616000702390075055600ef0490
0066038400450471004501c7003d046600960492ffe90400009e03b50064
047100450457008201c7003d0400003c03f0ffcd0462ffe8040000a20393
0073047300640495ffe403e4006f04660096045eff6d05d2009c063b0064
01c7003d046600960473006404660096063b00640556005c06be00e7045a
005705a900bb055600900239007502390075040000440887ffea07dc0057
06c100e504b70057051d00e705ca00570556ffd70535005705560059045a
005705a2ff7f0556005c0756ffb704e9006305b9005705b9005704b70057
057cffeb06aa005a05c70056063900bb05cc00570556005805c700ba04e3
00ff051d00e7065c00a40556ffbf05d10057056300db075d005707620057
067100e70717005705350057058d005a082e00570574ffca0473005a0480
0076042d006403f2004e046c00640473006a0581ffc503b8001f04730080
0473008003c7003f0483ffd8057c003f0467003f047300640467003f0473
ffeb0400007306aa00430400000006af005f0400fffd0493007d04240097
06a4007906cf007904f8007905e3003f0435003f03ef00350604003f0446
ffe80473006a047300450306003f03f700610400004e01c7003d01c7003d
01c7ff080748ffd8069f003f0473004503c7003f040000000473007d03f0
005702b7003f0800005108aa005b055c00ac0000003f0000ff930000ffa2
0000ffa2000000760000fff30000fff30000fffd0000fffd000001c00000
ff850000012e00000053031000f10000014a02330082000003ca0000ffc3
0239006d0481001d0456ffe60331ffcd041100a104d1005601f9004f030f
00b304ca004f04b8008b01f900bc041300a903b0000703b400b004ca004f
04cf002301f9fff802d2fff00498006c043cffd30488009c045f003303b1
00af03d4fff304660003041300a9058e00a20524ffe103f2004f03f200bc
03f200bc01e3009e0356009e0686004f01f9009b041300a90413007003b4
001703b400170448ffe1058e00a2058e00a2058e00a2058e00a20481001d
0481001d0481001d0456ffe60331ffcd041100a104d10056024b002d034a
003904b8008b024b004e041300a903b0000703b400b004cf002302d2fff0
0498006c0488009a045f003303d4fff304660003041300a9058e00a20524
ffe101f9004f0456ffe603b00007045f0033049b00370000ffdc0000ff25
0000ffdc0000fe510000ffdc0000fe510000ff160000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ffdc0000ff16
0000ffdc0000ff200000ffdc047300a408000000067e00bb04d600640659
00c6051200800000fef40000fd410000fdb70000ff580000fdec0000fe3b
0000ff2e0000ff380000fe090000fd760000feb30000fd0e0000fd660000
ffec0000ffc40000fe44041b005606ac007b06ac007b0000ff6a0000fdb8
0000feca0000fdc80000ff2d0000fdc70000fced0000fc0e0000fc0e0000
fd140000fc910000fc7c0000fc920000fc460000fc000000fc460000fbdd
0000fef40000ff500000fe7e0000fc6a0000fc950000fdf70000fe330000
fc990000fcf90000fcef0000fc9f0000fc8b0000fbde0000fd2c0000fd4b
0000fc780000fc6801c7003d0556ffd70473005a0556ffd70473005a0556
ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473005a
0556ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473
005a0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c
0473006a0556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a0556005c0473006a0239007501c7003d
0239003801c7ffe8063900bb04730064063900bb04730064063900bb0473
0064063900bb04730064063900bb04730064063900bb04730064063900bb
04730064067e00bb04d60064067e00bb04d60064067e00bb04d60064067e
00bb04d60064067e00bb04d6006405c700c60473008005c700c604730080
065900c605120080065900c605120080065900c605120080065900c60512
0080065900c605120080055600ef04000000055600ef04000000055600ef
040000000556ffd70473005a0239007501c7003d063900bb0473006405c7
00c60473008005c700c60473008005c700c60473008005c700c604730080
05c700c60473008000000030000000300000003000000030045a003e0306
003c0756ffb70581ffc504b7005703c7003f04b7005703c7003f05c70056
0467003f047300ea040000a2047300870400fff40556ffbf0400fffd0563
00c6042400810563007504730044063900c104730076063900bb04730064
01f900a10000000002bc000003f2008c0473004405d8008c053500570473
0044053500570473004405c700a005c700ba0400007305c7005b0646008c
0535003b0473006c047200000556004404e9006604e3ff2a063900c703f9
00890709004401c70036023900620556005b0400004601c7003603f0ffcd
06c5007005c7ff3004730044063900bb06f200bb0557006405d8008c0473
ffeb05560058055600820400005704cc002d02aa00c80239ffe404e300a0
0239007304e300ff061600bf05c700c605bd006f0400000004e300320400
002804e3ffba04e30033040000110400fffa04730078041500490381000a
0400006b0473ffeb021400bc034e00bc04ac0072023900730aaa005b09c7
005b0873006c08730052063a0052038e003609c70064078e0064063a0044
047300760556ffd70473005a0000fff90556ffd70473005a0800ffad071d
0057063900c704730006063900c7047300350556005b04000046063900bb
04730064063900bb0473006404e3ffba0400ffae01c7ff080aaa005b09c7
005b0873006c063900c7047300350846005604f1000405c7006404730044
0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c0473
006a0239007502390036023900750239007d063900bb04730064063900bb
0473006405c7006002aa004405c7006002aa004405c700c60473008005c7
00c604730080055600900400004e04e300ff02390061045cffd6037effb5
05c7005604730044055a005604d6006404d6006404e30032040000280556
ffd70473005a0556005c0473006a063900bb0473006400000035063900bb
04730064063900bb04730064063900bb04730064055600ef040000000473
00880473006c04730044047300440400003c040000100473006c0473006c
0473007105a200760384004503b8001f04ed001f041200640239ff380473
00350473003504670064040200a604ef007c0473007c0473004404730044
01c7001f01c7003d01c7003d01c7ffcf01c7fff001c700070482003006aa
006d06aa006d06aa00430473ff100473004404a9003f0473006406200064
063b00640473006402aaffb002aaffb002aaffb002aaffed02aa001502aa
004402aa007504460044044600410400ffd70253ff380271ff380251008b
02c8ff330239002b0239001c0473004204810064046600960400ffd305c7
ffd30400ffdd041e009504000028046100280400ffae0400ffcc040000ca
040000c70400003704000023063900bb0418004404120059046700640467
003f0258ff1f0400ffd703950044047300690400003d04000083076b006c
073e006c07c7006c055e007603b0007305ab00730602005d0522003604bf
003603e20064043800130277003a0277003a00faffa201c1003a01c1001e
01c10027029d003a041400d302c9004f0187010402d7011501c7010801c7
010001c7013302aa01c002aa01ad02d900de02d900d504ac00b804ac00b8
04ac00ad04ac00ad02aa01d902aa015a02aa012a02aa012102aaff9502aa
005e02aafffb023900700239015202aa00fb02aa00fb02aa00a602aa00a6
02aa00a602aa001002aa000202aa00a202eb00d600be00400299006302b1
004002d900d5031000960310009603100096031000960310009602aa0062
02aa006202aaffc702aa00c902aa00d60457009604570096045700960457
00960457004304570043045700430457004304570043031000430457002f
0457002f0457002f0457002f0457002f0310002f04570025045700250457
002504570025045700250310002f0457001a0457001a0457001a0457001a
0457001a0310001a04570042045700420457004204570042045700420310
004204570096045700960457009604570096045700420457004204570042
0457004204570042031000420457002f0457002f0457002f0457002f0457
002f0310002f0457002f0457002f0457002f0457002f0457002f0310002f
045700260457002604570026045700260457002603100026045700420457
004204570042045700420457004203100042045700960457009604570096
045700960457004204570042045700420457004204570042031000420457
002604570026045700260457002604570026031000260457002304570023
045700230457002304570023031000230457002f0457002f0457002f0457
002f0457002f0310002f0457004b0457004b0457004b0457004b0457004b
0310004b0457009604570096045700960457009604570042045700420457
00420457004204570042031000420457001a0457001a0457001a0457001a
0457001a0310001a04570024045700240457002404570024045700240310
00240457002f0457002f0457002f0457002f0457002f0310002f0457004e
0457004e0457004e0457004e0457004e0310004e04570096045700960457
0096045700960000ff780000ff6a0000fea20000ffb30000003f0000ff9b
000000150000ffac0000ffd000000091000000250000ff140000ffb30000
ffb3000000200000001100000045000000df0000fedc0000fea70000fee2
0000fef00000ff7d0000ffbb0000ff2c0000feec0000fee90000fee30000
fe400000fe1b0000ff210000fe460000fec60000fee70000fe9b0000fef5
0000ff630000fe210000fe500000fe690000fe260000fe640000fe640000
fe190000fe400000fd1b0000fd1d0000fe950000fea90000fd980000fe16
0000fe620000ff2c0000fe210000fedb0000fe3a0000ffca000000540000
fe6d000000100000ffe70000ff6f0000000d0000ff160000fefb0000ff26
0000fd1d0000feea0000fee70000ff6f0000ff6f0000ff6f0000fe980000
fedf0000fd1f0000ff310000ff2b0000ff530000ff000000ff010000ffc9
0000fef10000ff0e0000ff1d0000ff130000fee10000fe210000ff400000
ffce0000ff4c0000fed002aa015a02aaffe902aa004f040a004304660096
05ba00ef070e007c05ba00ef04730064063b00640482ffd3063900bb0473
006405c700ba0400003704e3005d0306ffe904ff006a043c0056060d00b4
049d00f506c5ffe406aaffe1056300dc047300b20563002b0419ffc80556
00820556008204e0007d04c5008805f700bb046e00640352003302de0045
0482ffd304a200640400007301c7ff08063900bb03870064038700110556
005c05b900570473006a047300800a6a00bb04c20061061400440435002f
07390043058e00440558ffb00400ffd0070600430572004406a1001d057b
00430831004306d9004404e9004903b8fffd06a5011a05d200c5063900bb
04730064061400fe04b800a2061400fe04b800a20a6000bb088a0064069f
00bb04cc00640a4200bb070200640000feca0a6a00bb04c2006105c700ba
04000073047300390000ff5a0000ff580000ff7d0000ff7d0000fc2b0000
fc4c05b9005704730080053500570435003f055600580473ffeb0528004b
0434004404e9006303b8001f04b7005703c7003f05f100e7048a00790721
0056059b003f08b3005706b7003f05c700ba0400007305c700ba0400006c
04e300ff06aa0043072e00e7052900b0056300db0424009706cd00400514
001f06cd00400514001f023900750756ffb70581ffc50504004b0428002a
057cffeb0483ffd805c7004b0467002a05c700560467003f056300db0424
009706aa005a057c003f02aa00db0556ffd70473005a0556ffd70473005a
0800ffad071d00570556005c0473006a063900c1047300760756ffb70581
ffc504e9006303b8001f04e900630400ffae05b900570473008005b90057
04730080063900bb04730064063900bb04730064058d005a03ef0035051d
00e704000000051d00e704000000051d00e704000000056300db04240097
0717005705e3003f055600490473006c079d004906ab006c077f0108061c
00b804e9010803b800b807d8ffeb06c4ffd8081a005606a5003f063900c7
0467006405dc00ff08ea00430000fec30000ff7900000033000000700000
fffb0000feb9000000320000ffd40000ff7c0000ff700000feb2000000b0
000001360000ff6e0000fe6c000000de0000003d0000fee50000feec0000
feb40000fde20000fef5000000100000fec70000fece0000001d00000021
0000ff7a0000fe9500000041000001ac0000003000000030000000060000
00060000009400000074000000300556ffd70473005a0556005904730044
0556005904730044055600590473004405c700ba0400007305c7005b0473
006c05c7005b0473006c05c7005b0473005f05c7005b0473006c05c7005b
047300560556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a04e3005d0239005d063900c704730035
05c700560473004405c700560473004405c700560473004405c7fffd0473
fff305c70056047300440239ff4501c7fef5023900750239007d0556005b
040000460556005b040000460556005b040000460473005201c7ffe80473
005201c7ffe80473005201c7ff220473005201c7feff06aa005a06aa0043
06aa005a06aa004306aa005a06aa004305c700640473004405c700640473
004405c700640473004405c7006404730044063900bb04730064063900bb
04730064063900bb04730064063900bb04730064055600580473ffeb0556
00580473ffeb05c7006002aa004405c7006002aafff205c7006002aafff2
05c7006002aaff39055600900400004e055600900400004e055600900400
004e055600900400004e055600900400004e04e300ff0239007304e300ff
0239003804e300c90239ffa804e300ae0239ff7005c700c60473008005c7
00c60473007d05c700c60473008005c700c60473008005c700c604730080
055600fe040000a2055600fe040000a2078d010005c7009f078d010005c7
009f0556ffbf0400fffd0556ffbf0400fffd055600ef0400000004e30032
0400002804e300320400002804e3003204000028047300440239007305c7
009f040000000473005a01c7003604900066049000660490006604900066
049000660490006604900066049000660556ffd70556ffd7068200b80682
00d2068200b8068200d2068200e3068200e3038400450384004503840045
038400450384004503840045061e0082061e00ab07ae00a507ae00bf07ae
00a507ae00bf047100450471004504710045047100450471004504710045
0471004504710045068f0082068f00ab081f00a5081f00bf081f00a5081f
00bf081f00d0081f00d001c7003d01c7003d01c7003d01c7003d01c7003d
01c7003d01c7003d01c7003d03010082030100ab049100a5049100bf0491
00a5049100bf049100d0049100d004730064047300640473006404730064
0473006404730064069d0082069d00ab082d00a5082d00bf07c900a507c9
00bf04660096046600960466009604660096046600960466009604660096
04660096068200ab07ae00bf081200bf07ae00e3063b0064063b0064063b
0064063b0064063b0064063b0064063b0064063b0064067a006b067a006b
080a00a5080a00bf07a600a507a600bf07a600dc07a600dc049000660490
00660384004503840045047100450471004501c7003d01c7003d04730064
047300640466009604660096063b0064063b006404900066049000660490
006604900066049000660490006604900066049000660556ffd70556ffd7
068200b8068200d2068200b8068200d2068200e3068200e30471ffeb0471
ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb068f0082
068f00ab081f00a5081f00bf081f00a5081f00bf081f00d0081f00d0063b
0064063b0064063b0064063b0064063b0064063b0064063b0064063b0064
067a006b067a006b080a00a5080a00bf07a600a507a600bf07a600dc07a6
00dc04900066049000660490006604900066049000660490006604900066
0556ffd70556ffd70556ffd70556ffd70556ffd702aa016702aa004f02aa
016702aa00c002aa00ed0471ffeb0471ffeb0471ffeb047100450471ffeb
068200d10682007c06f300d106f3007c05c7005602aa00b802aa00b802aa
00e301c7003d01c7003d01c7003d01c7003d01c7003d01c7003d02390075
02390075036500d10365007c02aa00d202aa00d202aa00e3046600960466
009604660096046600960495ffe40495ffe40466009604660096055600ef
055600ef068200a906e6007c061e00ab02aa006102aa006102aa012a063b
0064063b0064063b0064063b0064063b0064076500d1069d007c074200d1
067a006b0616000702aa015a02aa01900473006105c7008f05c700ba06aa
004305c70043090a0060078d002f0556005b04e300a30800ffd70400ffd3
04c100660000ff2b0000ff610000ff320000ff4401c7001f01c7ff08042b
ffa1055600580506006c025aff1f0508004402c8ff8d0555007505550075
02aa001e02aa001e02aa005002aa005002aa003002aa00ac02aafffe02aa
ffce02aaff7b023900b702aa018602aa018602aa002602aa0026032effbe
032effbc02aaffc80000003b0000004a0000ff910000fec20000fefb0000
fefb0000fe410000004a0000ff7b0000ff530000fea2055600580473ffeb
03ffffd205bcff9e071d00570401004004000073047100440471002903c5
004403b8001f01c7ffd6035000150400003c03950022057c003f04b0003f
047300640400003c047300300400fff704e3001c078d008103a8003c0473
006e04730064044800440446ffe804460044041d00cb0466009604730020
0595002304730020040000a205c7009f0400002803b8001f03b8005704db
fff80306003f0400ffd30467003f0448004405d200d40483ffd803ee005d
05bd004803a1007a03a1007a03d0007a039d007a039d007a03eb00a203cf
007a0149007a02ac007a0399007a0302007a046f007a03c9007a03cb007a
03f900a2030f008a0381007a03a7007a032c00de038d00a3052000ea02de
006e02de009602d400ab04bd009f027e003a032c00ab031900ab031900ab
0250007c025000600322008300ff00250286003a03ff003a0275003a0328
00ab02d7008d032800a7032800b302ef0014019000a202d4008f03bc00d0
0435007802dc00cc0388006e0330002802f000da030c00a203810099030c
fffb00ffffe20187ffb002d4000c02dc00510330ffb702f0005e0309ffe9
03810012030cff7305ad001d053d00a105fd005604dc000704e000b005f6
004f053f00a90650ffe104ac00670000fd850000fddb0000fde30473fffc
02aa00ec02d5006e0400000008000000040000000800000002ab00000200
0000015500000473000002390000019a000000ab00000000000005e50053
05c700ba06aa0052057cffea074d00800711006c070c00690556ffd705c7
005f0400ff860473003d04e3ffc1040000600400002604a500c600000102
0000fee50000fe590000000b0000ff530495ff8f05c700a005c700ba05c7
00a0045a00570306003f0000fece0000ffc30000ff4202d200240000fee1
047300440473006c0239ffd006aaffd00473ffb80473ff1c02aaffa002aa
ffa00400004e0239ffc0040000280473ffef030b007a047400050618ffe2
01c7001f01c7001f0473ffeb0466003f04810021047300440473006c0239
ff83058200350400004601c7ff5b06aa0043047300440473ffeb02aaff6f
0400004e0318ff38040000a20400fffd040000280473005a0473006c0473
006c0473006a0384004503b8ffb30514007601c7003d0400ffcb0253ff56
04730080045cffe40309008002da00a702da0068032900a60250006001a5
009701a5ffea0322008302d600b400ff004b00ff006200ff006200ff004b
01e1000400ff003e00ffffce026d006403ff003e03ff005a0275ff6f0275
003902d20052032800b1032800a802c000370187ffe30190004802750038
033700ac027500730275007102dc0047029f004c029f004c02f0004c02bc
002b032900b70000ff6d0000ff8e0000ff0a0000ff830239006f02de000f
0319003103280030030c000b03190023063900c70556ffd70556005805c7
00ba02aa0012049000660490006604900066049000660490006604900066
049000660490006601c7003d01c7003d01c7003d01c7003d01c7003d01c7
003d01c7003d01c7003d0466009604660096046600960466009604660096
04660096046600960466009601c7003d01c7003d01c7003d01c7003d0466
009604660096046600960466009603a0007b0556001f05c700780556ffec
0556005a0473ff860400004401c7ff08060a00bb0473006905c7000c02aa
00330556009f040000000400003c040000730400003c01c70036045aff83
0306ff610556ffbf0400fffd0556ffbf0400fffd04e9006603840045057c
ffd504abffd80000ff5d0000ff9f0000ff980000ffc70000ff2a0000ff27
0000fee4000000330000fe51078b002303eb000b0400003c0473002201c7
00310473ffee0556005805c7002f0473ffb80239ff3705c7005604730044
0556005b0400004604e30032040000280400006b04d000560383003f0538
006f0000fffd000000250000ffcc0000ffa80000ffb00000fee201c7003d
000000000000007400000074000000740000007400000104000001340000
029800000498000005ce000007880000081c0000089200000918000009e8
00000a5800000ad000000b0c00000b3e00000b8800000c6e00000d2c0000
0e3800000f50000010ae000011e8000012fe00001392000014d200001602
00001656000016f80000177c000017da000018620000193600001b1e0000
1c0000001d5600001e5a00001f58000020520000212c0000226a00002380
000024300000251e00002654000026ec0000299a00002b4c00002c540000
2d4a00002ed800003042000031c00000328a000033760000344600003614
000037dc000038fe000039fa00003a7c00003ace00003b5200003bce0000
3c0200003c5c00003dc000003f2c00004012000041220000425200004364
0000451c00004684000047e0000048f600004a9400004bae00004d7a0000
4eb800004f98000051000000525a0000538a00005502000055e200005736
000058060000598200005ad600005bbc00005cba00005dee00005e300000
5f7c000060180000604a0000607a000060a8000060da0000610a00006150
0000618c000061bc000061ec0000622a0000625c0000628e000062c20000
62ee0000631e0000634e00006382000063bc000063ea0000641e0000644c
0000647e000064b4000064e400006518000065520000658e000065c60000
660e0000664000006686000066cc000067b000006834000069b000006af2
00006c6600006cbc00006d3800006e9200007034000071c8000072b20000
731600007374000074ba00007608000077be00007924000079b400007a5c
00007b2000007c9800007dec00007ed200007fb00000801c000080f40000
81dc0000832c000083bc00008506000087080000889a0000898000008a0c
00008a5800008b1400008c4200008d8600008e0800008ea800008f400000
8fc800008ff80000902a00009060000091fe000093b4000093ea0000941a
000094f2000095f60000967a00009710000097a4000098420000987c0000
98b20000991600009a3a00009aa400009b0600009c9e00009e1200009f54
00009f840000a0000000a1000000a29e0000a2da0000a3100000a3400000
a3800000a3b20000a3e20000a41e0000a4500000a4820000a4b20000a4e6
0000a5160000a55e0000a59a0000a5cc0000a6b80000a72a0000a7c40000
a8100000a8780000a8b80000a9420000aa2a0000aac40000ab260000ab9e
0000ac8e0000ad9c0000add60000ae080000ae3a0000ae700000aede0000
b0260000b1a00000b1d00000b2120000b3140000b4380000b4700000b56e
0000b6160000b6e20000b7d60000b9600000bb2c0000bd5a0000be740000
bea60000bed80000bf080000bf3a0000bf720000bfa20000bfd20000c00a
0000c0400000c18a0000c1cc0000c1fa0000c22c0000c25e0000c2840000
c2aa0000c2dc0000c4340000c57c0000c5a40000c5ca0000c6020000c632
0000c6620000c6940000c7820000c8720000c8a40000c8e80000c91a0000
c94c0000c9860000c9bc0000c9ee0000ca200000ca500000ca7e0000cab4
0000cae60000cb160000cb460000cb6c0000cb900000cbc40000cce40000
cd180000cd5e0000cd900000cdd60000ce140000ce460000ce780000cea8
0000cf220000d01a0000d1660000d2580000d34e0000d4100000d4d20000
d54a0000d6820000d6f60000d71e0000d8340000da820000dac20000db02
0000db420000db800000dbde0000dc3c0000dcaa0000dcca0000dd980000
de240000de5a0000deae0000def80000df420000df5e0000df7a0000df9a
0000dfba0000dfda0000dffa0000e0200000e0460000e06c0000e0920000
e0c20000e0ea0000e1120000e13e0000e16a0000e19e0000e1c80000e1f4
0000e22a0000e2540000e2800000e2b60000e2e00000e30a0000e33e0000
e36e0000e3a20000e3e60000e4160000e44a0000e48c0000e4c00000e4f2
0000e5340000e5680000e5980000e5da0000e61e0000e6640000e6c00000
e6dc0000e6f80000e7140000e7300000e74c0000e8ba0000eb660000edd6
0000edf20000ee0c0000ee280000ee440000ee600000ee7c0000eed80000
ef120000ef7c0000f0460000f0e60000f1bc0000f23c0000f2c40000f334
0000f3ca0000f4280000f46e0000f4cc0000f52e0000f55e0000f5ae0000
f5ec0000f5fc0000f62c0000f7600000f88a0000f8b40000f8d00000f8fc
0000f9340000f9800000f9b00000f9e00000fa140000fa4a0000fa7a0000
fab00000fae00000fb100000fb400000fb800000fbb00000fbe00000fc10
0000fc400000fc700000fca00000fe180000ffd4000100080001003c0001
019a000103140001034400010376000103aa000103dc0001042c00010468
0001048c000104b2000104e6000105fa0001062000010648000107500001
0776000107a0000107c6000107ec000108f400010a4e00010a8800010ab8
00010af800010b3a00010b6000010b9600010bca00010bfa00010cda0001
0e4200010e7200010ea200010ed200010f0200010f3800010f6c00010f92
00010fb800010fee0001101e0001104e00011082000111280001117c0001
11aa000111da0001120a0001123a0001126a000112a0000112d000011300
000113300001136000011394000113c8000113f8000114280001149e0001
14ca0001165200011708000118ca00011aa000011c6c00011dda00011e40
00011ec000011f0800011fac000120d6000121c2000122e00001238a0001
248e000125b2000126f2000127260001273600012746000127ec000127fc
0001280c0001281c0001282c0001283c000128ea000128fa0001290a0001
29880001299800012a5800012a6800012b1a00012b2a00012b3a00012b4a
00012cb200012dba00012dee00012e2600012e5600012e8400012eb40001
2eec00012f220001308c0001316c0001322e0001335600013430000134aa
000135ae0001365a0001378c0001379c0001389e000138ae000139ae0001
3a8600013b8800013c7a00013dde00013ed800013f1000013f4e00013f7e
00013fb400013fea0001401e000141360001416600014266000142760001
4286000142ba000142ca00014404000145380001463e0001466e0001469e
000147d4000147e4000148ae000148be0001493000014a5600014a660001
4c3200014d3e00014e2800014e5800014f900001508a0001509a000150aa
000150ba000150ca000150da000150ea000150fa000151dc000152f60001
53060001542e0001552a000156460001579e000158700001599400015a62
00015b4e00015c8200015d9400015da400015e9c00015f8a0001608e0001
6164000161740001635c0001646200016472000164a2000165be000166a2
0001680e000168ec000168fc000169aa000169ba000169ca000169da0001
69ea00016b9600016ba600016d0000016de200016f6a0001715e00017228
000173460001740a000174f60001761e0001771400017748000178e40001
79a000017a8400017a9400017aa400017ad600017ae600017c3200017d66
00017ec800017ef800017f280001807600018142000181da0001820a0001
840c000184dc000185640001867800018720000188280001887600018900
000189bc000189ee00018a6800018ab400018b9a00018bec00018c400001
8c7a00018cd000018d5400018da000018df400018e6000018fea000190c8
000191ca000192440001938400019420000194f2000196080001972c0001
97ae0001989e0001996200019a3a00019b4e00019cae00019d3a00019e06
00019efc00019fa80001a0da0001a2160001a31e0001a41a0001a5080001
a5da0001a70e0001a8480001a90e0001a9f00001aae40001ab340001abdc
0001ad6c0001adb80001adfc0001ae3e0001ae880001af1c0001afce0001
aff40001b01a0001b09a0001b11a0001b1460001b1720001b1c80001b200
0001b2640001b2a00001b2dc0001b35e0001b3bc0001b4000001b46c0001
b4aa0001b4f60001b55c0001b5a20001b5f00001b6360001b7ec0001b9b2
0001ba0a0001ba5a0001ba9a0001bb080001bb700001bba00001bbc60001
bbea0001bc160001bdee0001be140001beb20001bf120001bf700001bfa0
0001bfd00001c0200001c0700001c0b00001c1220001c1760001c1d40001
c22a0001c2600001c2a20001c2e80001c3320001c3620001c39a0001c3ca
0001c5420001c8880001c9a00001caba0001cc0e0001cd6a0001cdb80001
ce060001ce6a0001ceb80001cf060001cf780001d0840001d1660001d254
0001d3340001d4140001d4d20001d5c20001d66a0001d7320001d7720001
d8fe0001da8a0001dc3c0001dca80001dd140001dd700001ddce0001dec2
0001dfbc0001e08c0001e15c0001e22c0001e3100001e3f40001e4d80001
e4ea0001e4fc0001e50e0001e5200001e5320001e5940001e6060001e6ea
0001e6fc0001e70e0001e71e0001e72e0001e7400001e7520001e7640001
e7760001e7880001e79a0001e8580001e91a0001e9d80001ea9a0001eb10
0001eb380001eb600001eb880001ebc80001ec180001ec780001ecbe0001
ed0c0001ed560001edae0001edfe0001ee540001eea20001eef20001ef4a
0001efb20001f0080001f0620001f0d00001f11c0001f15c0001f1a60001
f1f20001f2360001f2620001f2900001f2d40001f31e0001f3520001f388
0001f3dc0001f4300001f4760001f4ba0001f5080001f55a0001f5a80001
f5f60001f64c0001f69a0001f6d40001f7160001f73e0001f7660001f78e
0001f7be0001f7ee0001f8340001f8820001f8de0001f9220001f96c0001
f9b40001fa0c0001fa540001faa60001faf00001fb440001fb7e0001fbb2
0001fbe20001fc120001fc420001fc860001fcb80001fcf00001fd180001
fd4a0001fd720001fda00001fdc60001fe160001fe520001fe9c0001fed0
0001ff0a0001ff3a0001ff940001ffce0001fffe00020026000200540002
007c000200a2000200e80002013e00020174000201a4000201d800020208
0002024a00020296000202c6000202f60002032600020360000203940002
04000002043400020496000204ca0002053000020564000205c600020686
0002076a000208900002097600020a2400020ad400020cd800020ed40002
103c000211880002138a000215540002161e000216f20002179e0002186c
0002193400021a2200021b2800021c0200021d3200021e5200021f220002
1f32000220500002214c0002225a0002235c00022374000223a6000223d4
000223ec000225720002268e00022766000228880002298200022ab20002
2ba000022cec00022df600022e0600022f0600022fb4000230e600023200
000232800002339e00023446000235b8000236ca00023814000238240002
38be000239d200023aba00023b6c00023c5600023d7a00023e7a00023f58
00023f68000240a2000241bc0002429e000243d0000244be000245d00002
46f600024706000247da000248ec0002496600024a7a00024b1400024c20
00024cfc00024db200024e9200024f640002502600025116000252040002
52e600025428000255620002565e000257320002588c00025980000259ac
000259f400025a7200025a8200025ac400025b0600025b4a00025b700002
5b9800025bc200025bea00025c1400025c3e00025c4e00025c8200025cd0
00025d4a00025d7a00025dc600025df600025e2600025f9a000260ea0002
611a0002614a0002617a000261aa000261d0000261f6000262380002627a
000262aa000262da000263080002632e000263540002637c000263ac0002
63dc00026500000265ea0002661a0002664a0002667e000266b2000266e2
00026712000267460002677a000267aa000267da0002680e000268420002
6872000268a2000268d60002690a0002693a0002696a0002699e000269d2
00026a0200026a3200026a6600026a9a00026aca00026afa00026b200002
6b4600026c6e00026da400026e7400026f6400026f9400026fc400027082
000271d800027308000273a40002743c0002746c0002749c000275760002
76b0000276e600027734000277d80002780c0002786a0002789a000278ca
000278fa0002794600027976000279a600027abe00027bc800027cf00002
7e4600027f160002805e000281ac000282fa000283d00002853200028542
0002855200028694000287800002884a000289ea000289fa00028ae40002
8bec00028d5400028e1c00028f220002905c0002911e0002912e0002913e
00029230000292ec0002936c00029470000295a8000296d0000298120002
990800029a0400029af600029b0600029c4000029d8200029ebe00029f36
00029fb60002a0800002a1160002a1e00002a26a0002a2dc0002a3c20002
a4c60002a6560002a7000002a7f00002a89e0002a9900002aa660002ab38
0002ac780002ad480002ae1c0002ae860002af980002b01e0002b0ca0002
b1980002b26e0002b3680002b4be0002b58e0002b66c0002b7500002b834
0002b9520002ba2c0002bb260002bc540002bc640002bd460002be0c0002
be620002bfaa0002c0bc0002c1ce0002c34a0002c5180002c6fa0002c88c
0002c9fc0002cbbe0002cd540002ceba0002cf620002d17c0002d2380002
d3020002d3fc0002d4ac0002d54c0002d5de0002d69c0002d7a60002d8d4
0002d9980002d9a80002d9b80002d9c80002d9d80002d9e80002da340002
da800002dae20002dbcc0002dbdc0002dbec0002dc560002dcc40002dcf0
0002dd000002dd100002dd3c0002dd720002ddb40002ddfc0002de460002
de740002debe0002df080002df3e0002df760002dfbe0002dfee0002e046
0002e1080002e2280002e26c0002e3ae0002e4740002e55e0002e5940002
e5d80002e61c0002e6600002e6960002e6c80002e70a0002e7740002e7c6
0002e7d60002e84e0002e8d40002e9440002e9a60002ea2c0002ea8c0002
eaf60002eb6a0002ebda0002ec380002ecde0002ed760002ede20002ee70
0002eeca0002ef380002efe20002f0880002f11e0002f18e0002f2100002
f2740002f3200002f3de0002f48a0002f51c0002f57a0002f5e60002f63c
0002f6be0002f73c0002f7c20002f84e0002f8a80002f9140002f9840002
f9f20002fa620002fae60002fb760002fbdc0002fc560002fcd20002fd4a
0002fdf00002fe880002ff180002ff760003001400030090000301220003
01c6000302700003030800030364000303b800030420000304c600030570
0003063a000306e0000307420003079a000307fa000308880003090e0003
099c000309fc00030a6000030aca00030b3200030b9a00030c1200030c9a
00030d2e00030d9a00030e0200030e6600030f1200030fd2000310800003
110e0003116c000311d800031248000312ec0003139200031456000314f8
0003155c000315ec0003165e000316f600031774000317ee0003185a0003
18e800031944000319a200031a2800031aa400031b0c00031b7000031bc4
00031c3200031c9a00031d1800031d8e00031e0800031e8800031ee40003
1f4a00031fae0003204e000320f0000321ae0003225e000322ba00032332
000323900003241a000324b200032540000325a600032604000326920003
27040003279e00032832000328a2000329120003298a000329e800032a48
00032ac200032b1c00032b7c00032bd600032c3200032c9a00032cf80003
2d2600032d5200032d9e00032dcc00032e1600032e7e00032efc00032f66
00032f9200032fd400033046000330b2000330fa0003310c0003311e0003
31300003314000033180000331c6000331fc0003323200033264000332b2
000332fc0003333200033368000333ae000333e200033450000334c40003
350c00033570000335c2000335d4000335e6000336100003364a000336b6
0003371e0003377c000337c60003380c00033886000338b6000338e20003
3928000339a4000339d600033a0200033a4800033a8a00033ad200033b0c
00033b4800033bc400033cde00033d4c00033d9200033dd400033e1c0003
3e9800033eaa00033ebc00033ef400033f2e00033f7400033fb400033fe2
000340b60003416e00034258000342ac000342e800034608000346800003
46d800034716000348680003495c000349da00034ae000034ba800034c7a
00034daa00034e7c00034fae0003504e000351220003519c0003526a0003
527a000352bc000352f4000354320003559a0003566800035692000356c6
000357fc0003593200035aa400035bc800035cce00035dee00035ef20003
5f8e0003603800036150000361d4000363360003642400036562000366ac
0003677c000368700003693800036a8a00036ba600036c9a00036db20003
6f0a000370400003711e000371ee000372ac000373e80003750c0003751c
0003752c0003753c000375da0003767e000376ae000376de0003770e0003
773e000378fa00037a0c00037b1000037c0800037d6800037ea000037fa4
000380ce0003822600038388000384fc000386460003880e000389940003
8b6a00038d0400038e0e00038f06000390460003917c00039210000392a4
000392d80003930c0003954200039752000398d200039a2000039be20003
9d6a00039dca00039dfa00039e2a00039f2400039ffa0003a0f80003a172
0003a1ca0003a2040003a23c0003a4060003a6160003a7440003a85e0003
a9840003aa9c0003abbc0003ad340003ae280003af160003b07a0003b198
0003b30a0003b4960003b5de0003b6fc0003b7be0003b8780003b98e0003
ba9e0003bbf40003bd3c0003be620003bf700003bffc0003c12e0003c1ea
0003c2f80003c3cc0003c49e0003c5c20003c6e80003c70e0003c7340003
c7440003c7740003c7a40003c8dc0003ca160003cad20003cb8c0003cc80
0003cd640003ce2c0003cee80003cfb60003d0860003d1840003d29e0003
d2ea0003d31a0003d34a0003d37e0003d3b20003d3c20003d3d20003d402
0003d4320003d4660003d49a0003d4ce0003d5020003d5360003d5680003
d6640003d6740003d6a40003d6d40003d7080003d73c0003d7700003d7a4
0003d7d80003d80c0003d8400003d8720003d8a20003d8d20003d9060003
d93a0003d96e0003d9a20003d9d60003da0a0003da3e0003da720003db2a
0003db3a0003dc860003de0c0003df5e0003e0740003e1920003e2860003
e3a20003e4be0003e5da0003e6f00003e7d40003e89c0003e9720003eb14
0003eb680003ebfa0003ec640003ecc60003ed460003eda60003edd80003
eeca0003ef300003ef6c0003efea0003f0520003f0b80003f1680003f334
0003f3d40003f42c0003f45a0003f4960003f5020003f5b80003f62a0003
f6920003f72c0003f7820003f7be0003f7ee0003f8540003f91e0003f974
0003f9ae0003fa0a0003fa680003fb140003fbd40003fc420003fcb80003
fd260003fd4e0003fd760003fda60003fdd40003fdfa0003fe200003fe46
0003fe6c0003feae0003fef00003ff200003ff4e0003ff740003ff9a0003
ffc00003ffe60004000c00040032000400580004007e000400b2000400fe
000401320004017e000401a4000401ca000401f000040216000402460004
0276000402a6000402d600040306000403360004036600040396000403bc
000403e2000404160004044a0004046e00040492000404b8000404de0004
05040004052a00040560000405ac000405dc0004060c0004063200040658
0004067e000406a4000406ca000406f000040732000407740004079a0004
07c0000407e60004080c0004083c0004086c0004089c000408cc000408f2
0004091800040948000409780004099e000409c4000409ea00040a100004
0a3600040a5c00040a9000040adc00040b1200040b6200040b9600040be2
00040c1600040c6200040c9200040cc200040cf200040d2200040d520004
0d8000040da600040dcc00040e0e00040e4e00040e7400040e9a00040eca
00040efa00040f2000040f4600040f7a00040fc600040ffa000410460004
1088000410ca000410fa0004112a00041150000411760004119c000411c2
000411e80004120e000412360004125e00041284000412aa000412d00004
12f60004132a00041376000413ac000413fc0004142c0004145c00041482
000414a8000414d8000415080004152e0004155400041584000415b40004
15e80004161c0004164c0004167c000416ac000416dc0004170200041728
0004174e000417740004179a000417ce0004180200041836000418660004
1896000418c6000418f60004192a0004195e00041992000419c6000419fa
00041a2e00041a5400041a7a00041aa400041ace00041af800041b220004
1b4c00041b7600041ba600041bd600041c0800041c3a00041c6e00041ca2
00041ccc00041cf600041d2000041d4a00041d7400041d9e00041dce0004
1dfe00041e3200041e6600041e9a00041ece00041f0200041f3600041f60
00041f8a00041fb400041fde00042008000420320004205c000420860004
20b4000420e2000421140004214600042178000421aa000421dc0004220e
00042238000422620004228c000422b6000422e00004230a000423340004
235e0004238e000423be000423f2000424260004245a0004248e000424b4
000424da000425020004252a000425540004257e000425ae000425de0004
2612000426460004267a000426ae000426e200042716000427400004276a
00042794000427be000427ee0004281e0004285200042886000428ba0004
28ee00042922000429560004297c000429a2000429cc000429f600042a20
00042a4a00042a7200042a9a00042aca00042afa00042b2800042b580004
2b8800042bb800042be600042c1400042c4400042c7400042ca400042cd4
00042d0400042d3400042d7600042db800042dfc00042e4000042e840004
2ec800042f0c00042f5000042f8800042fc000042ffc0004303800043074
000430b0000430ec0004312800043168000431a8000431ea0004322c0004
326e000432b0000432f20004333400043370000433ac000433e800043424
000434600004349c000434d8000435140004355600043598000435dc0004
362000043664000436a8000436ec0004373000043768000437a0000437dc
000438180004385400043890000438ca0004390400043934000439640004
39a6000439cc00043a0e00043a3e00043a8000043ab000043ae000043b06
00043b2e00043b5400043bae00043be600043c4000043cbc00043d700004
3db000043dd400043e1400043e4400043e8400043eac00043ed600043efe
00043f2800043f4e00043fd20004405c0004412400044152000441800004
41cc000442180004424600044292000442c2000442f20004431a00044344
000443c200044442000445020004453200044562000445b0000445fe0004
462e0004465e0004468e000446dc0004470c0004473c0004476600044790
000447ba00044830000448ae000448f000044932000449580004499a0004
49ca00044a0c00044a3200044a5a00044a8000044aa800044ace00044b16
00044b6800044c6e00044e7400044fe00004519200045382000453a80004
55ea000456f80004580600045a6600045bce00045de400045e1e00045e5e
00045eac00045efe00045f9e0004601600046188000462ec000464780004
653000046674000467720004686000046986000469d800046a2a00046a82
00046ad800046b3e00046b7e00046bee00046c6c00046ce600046d340004
6d6600046d9600046dc600046df600046e3000046e6200046eb600046f0a
00046f5600046fba0004702c00047082000470d800047162000471ae0004
7206000472320004725e0004726e0004727e00047310000473ec00047586
00047694000476a40004775e0004784c000478c8000478d80004794e0004
79cc000479dc00047ab400047ac400047b7a00047b8a00047b9a00047c88
00047d4a00047e84000480300004811c000481b200048242000482da0004
82ea000483c00004842e0004843e000484f2000485e6000486f600048706
0004871600048726000487fc000488e4000489e000048a3000048a400004
8a5000048a6000048b8200048b9200048c3200048d2400048e3000048f6c
0004905e000490ea00049176000492c80004936e000493b20004944e0004
952c000495820004968000049750000498540004998a00049acc00049ba0
00049cde00049d4600049e1e00049f2a0004a07c0004a1d80004a3160004
a5440004a6800004a7b00004a8a40004a9b80004aae00004abda0004ad88
0004ae040004aed20004b0040004b0f40004b1fa0004b2d20004b3740004
b41c0004b53c0004b6100004b6d80004b78a0004b8a60004b92a0004ba3e
0004bbc20004bc8e0004bdc80004bf5c0004c01a0004c08a0004c1160004
c1d00004c2480004c3da0004c49a0004c5e80004c7860004c84a0004c97e
0004c9da0004ca9c0004cb3e0004cbfe0004ccae0004cd3c0004ce340004
ce920004cfdc0004d0ac0004d1920004d1c80004d1ee0004d22c0004d23c
0004d24c0004d25c0004d26c0004d27c0004d28c0004d29c0004d2ac0004
d2bc0004d2cc0004d2dc0004d2dc0004d4140004d4240004d5160004d628
0004d7c20004d9940004db580004dc800004ddec0004df580004dff60004
e0f40004e2700004e3640004e4280004e4620004e51a0004e5da0004e672
0004e6ca0004e8240004e9120004ea280004eb3e0004ebbe0004ec360004
ec8c0004ece00004ed160004edaa0004ee160004efde0004f1a80004f318
0004f5720004f7040004f8c20004fa0a0004fb4a0004fccc0004fe6a0004
ffca00050144000501ee000502fc000504e6000505860005062600050780
000508b0000509ea00050b5600050cc400050de400050fe2000511180005
11ce000513500005147a000515da000516d000051876000519c600051a96
00051b9800051c6200051dea00051f5a000520dc0005225a000523ae0005
251a0005268e0005277c000528a00005297a00052a9400052bbc00052d0a
00052dfe00052f92000530ea000531e4000532be00053386000535340005
361a000536ce0005371a00053766000537f8000538d40005395800053a14
00053a7000053bda00053d2e00053e3200053f340005403e0005416c0005
42d8000544aa000545580005466e000547a00005488a0005496000054a4e
00054ad000054b7200054c6800054d7200054ec200054fce0005504e0005
50ce000551cc00055228000552dc00055410000555100005563200055708
000557fc0005596800055a9600055bec00055d5400055dc800055e120005
5e5c00055ea600055ef000055f4200055f9400055fe60005603800056080
000560c80005611000056158000561a8000561f800056248000562980005
62e20005632c00056376000563c00005641200056464000564b600056508
00056564000565c000056632000566a40005670200056760000567d40005
6848000568f400056a4600056b8200056b9200056cae00056e4c00056f1e
0005700e0005711e00057274000573920005747600057582000576ac0005
777c000577a2000577d0000577e0000578de000579e600057ade00057bce
00057cc000057d9a00057eb800057ec800057f92000580600005809e0005
80de0005811c0005815c000581b60005820e00058298000582fe0005838a
00058634000586a4000587740005885400058924000589fe00058b040005
8c4400058e0200058f400005900a0005910a0005921200059322000593ba
000594540005956e000595da000596500005976c000597aa000598080005
984600059878000598bc000598fe0005992e0001000009d400f2003c005a
000500020010002f00550000023f024d000400040000005303ea00000003
00000000006a00000000000300000001000a006a0000000300000002000c
01520000000300000003006c012400000003000000040018019000000003
00000005001801a80000000300000006001c01c0000000030000000700ba
006a00000003000000080030009a0000000300000009008a01dc00000003
0000000d02aa026600010000000000000035051000010000000000010005
05450001000000000002000605b90001000000000003003605a200010000
00000004000c05d80001000000000005000c05e40001000000000006000e
05f00001000000000007005d054500010000000000080018055d00010000
00000009004505fe000100000000000d015506430003000104030002000e
07a40003000104030004001a07980003000104050002000e07be00030001
04050004001a07b20003000104060002000c07d800030001040600040018
07cc0003000104070002000c07f00003000104070004001807e400030001
04080002000c08100003000104080004001808040003000104090000006a
00000003000104090001000a006a0003000104090002000c015200030001
04090003006c012400030001040900040018019000030001040900050018
01a80003000104090006001c01c0000300010409000700ba006a00030001
040900080030009a0003000104090009008a01dc000300010409000d02aa
026600030001040a0002000e07a400030001040a0004001a079800030001
040b0002001407f000030001040b0004002007e400030001040c00020010
082800030001040c0004001c081c00030001040e00020008084400030001
040e0004001408380003000104100002000e08580003000104100004001a
084c0003000104130002000e08720003000104130004001a086600030001
04140002000c07f00003000104140004001807e40003000104150002000e
088c0003000104150004001a08800003000104160002000e08a600030001
04160004001a089a0003000104190002000c08c000030001041900040018
08b400030001041b0002000e08d800030001041b0004001a08cc00030001
041d0002000c07f000030001041d0004001807e400030001041f0002000c
08f200030001041f0004001808e60003000104240002000e090a00030001
04240004001a08fe00030001042a0002000e092400030001042a0004001a
091800030001042d0002000c093e00030001042d00040018093200030001
080a0002000e07a400030001080a0004001a07980003000108160002000e
08a60003000108160004001a089a000300010c0a0002000e07a400030001
0c0a0004001a0798000300010c0c000200100828000300010c0c0004001c
081c00a90020003200300030003600200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200052006900670068007400730020
00520065007300650072007600650064002e0041007200690061006c0020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e00200069006e
002000740068006500200055006e00690074006500640020005300740061
00740065007300200061006e0064002f006f00720020006f007400680065
007200200063006f0075006e00740072006900650073002e004d006f006e
006f0074007900700065003a0041007200690061006c0020005200650067
0075006c006100720020004900740061006c00690063003a005600650072
00730069006f006e00200033002e0031003400200028004d006900630072
006f0073006f0066007400290041007200690061006c0020004900740061
006c0069006300560065007200730069006f006e00200035002e00300030
0041007200690061006c002d004900740061006c00690063004d0054004d
006f006e006f007400790070006500200054007900700065002000440072
006100770069006e00670020004f006600660069006300650020002d0020
0052006f00620069006e0020004e006900630068006f006c00610073002c
0020005000610074007200690063006900610020005300610075006e0064
006500720073002000310039003800320059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f00200064006900730070006c0061007900200061006e00640020
007000720069006e007400200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
0074006800650020006c006900630065006e007300650020007400650072
006d007300200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002ea9203230303620546865204d6f6e6f7479706520436f
72706f726174696f6e2e20416c6c20526967687473205265736572766564
2e417269616c20697320612074726164656d61726b206f6620546865204d
6f6e6f7479706520436f72706f726174696f6e20696e2074686520556e69
7465642053746174657320616e642f6f72206f7468657220636f756e7472
6965732e4d6f6e6f747970653a417269616c20526567756c617220497461
6c69633a56657273696f6e20332e313420284d6963726f736f6674294172
69616c204974616c696356657273696f6e20352e3030417269616c2d4974
616c69634d544d6f6e6f7479706520547970652044726177696e67204f66
66696365202d20526f62696e204e6963686f6c61732c2050617472696369
61205361756e646572732031393832596f75206d61792075736520746869
7320666f6e7420746f20646973706c617920616e64207072696e7420636f
6e74656e74206173207065726d697474656420627920746865206c696365
6e7365207465726d7320666f72207468652070726f6475637420696e2077
68696368207468697320666f6e7420697320696e636c756465642e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e00410072
00690061006c002000430075007200730069007600610041007200690061
006c0020006b00750072007a00ed007600610041007200690061006c0020
006b007500720073006900760041007200690061006c0020004b00750072
007300690076006f0069007400750041007200690061006c002003a003bb
03ac03b303b903b10041007200690061006c0020004900740061006c0069
0071007500650041007200690061006c002000440151006c007400410072
00690061006c00200043006f0072007300690076006f0041007200690061
006c002000430075007200730069006500660041007200690061006c0020
004b0075007200730079007700610041007200690061006c002000490074
00e1006c00690063006f0041007200690061006c0020041a044304400441
043804320041007200690061006c0020004b00750072007a00ed00760061
0041007200690061006c0020013000740061006c0069006b004100720069
0061006c00200050006f016100650076006e006f0041007200690061006c
0020006e00670068006900ea006e00670041007200690061006c00200045
0074007a0061006e0061b15430bb02aa0001004002a8b2393340b802a8b3
10153240b802a8b2073340b802a9b30c12327f411102a600af02a600bf02
a600ef02a60004003002a6004f02a6005f02a60003004002a6b28f3340b8
02a6b25f3340b802a6b34e513280b802a6b34c4d3240b802a6b340483240
b802a6b30a0d3240b802a6b3093a3240b802a6b330333280b802a4b34578
3240b802a4b3323a3280b802a4b32a313240b802a4b32425327f411002a4
000100ef02a40001000f02a4002f02a4003f02a4007f02a40004004002a4
b3151d3280b802a4b309143240b802a3b31a1b320fbf02a3007f02a300ef
02a30003004002a3400a091432124f064f0702ef413701eb0001009f01eb
0001007f01eb0001005f01eb0001003f01eb0001002f01eb0001000f01eb
0001007f01ea000100ef01ea000100bf01ea000100af01ea0001002f01ea
0001003f01ea0001004f01ea0001006f01ea0001007f01ea000101ed01ed
01ec01ec01eb01eb01ea01ea4012002c01001f01102c01101f01402c0140
1f01b90109010bb2341f91b8010b4037341f2e20431f3220431f3320471f
2c20431f1f20431f7b2a481f2d2a481f212a441f37010001010009010200
0800171700000012110840b801acb7fe870dfd870d0009b8013fb22a4c1f
4109013a00ba0401001f0136001f019a001f0104b22a721fbe0101002001
9a001f0100002002abb21ffb2db80156b21ffa1fb80801b21ff91fb80201
40131ff81fe41ff71fbb1ff51f4a1fc92aab1fb92db8019ab21fb81fb804
01b21fa02ab802ab400f1f8b1f521f7b2ae41f781f6c1f6e20b80401b21f
6c21b80401400b1f632aab1f5a2a5a1f5820b802abb21f4e20b80156b21f
471fb8019ab61f452aab1f442ab80101b61f401f891f332db80401b21f32
21b80401b61f311f721f2e1fb8019ab21f2c1fb80401b21f291fb80801b2
1f281fb80801b61f271f6c1f2221b8040140451f550d090d093790dc0790
a80790a607907e07904107903b07903607903507903007902f07902b0790
2507901d071408120810080e080c080a080808060804080208000814b8ff
e0402b000001001406100000010006040000010004100000010010020000
01000200000001000002010802004a00b013034b024b5342014bb0c06300
4b6220b0f65323b8010a515ab005234201b0124b004b544218b0382b4bb8
07ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801
19b101018e851bb0124358b900010119858d1bb9000101ff858d59590016
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
2b2b2b4b5079b9001f0158b3071f3d072b2b4b5379b900900158b307903d
072b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58
b901ae01ac4544b901ad01ac45445958b9032c01ae455258b901ae032c44
59594bb8019a53205c58b9003f01ae4544b901ae01ae45445958b908d600
3f455258b9003f08d64459594bb8040153205c58b9002301ae4544b90020
01ae45445958b916200023455258b9002316204459594bb8040153205c58
b9001e01ad4544b9002a01ad45445958b917e0001e455258b9001e17e044
59594bb8040153205c58b1ba234544b1232345445958b9162000ba455258
b900ba16204459594bb03c53205c58b11f1f4544b1211f45445958b90102
001f455258b9001f01024459594bb04653205c58b11f1f4544b12d1f4544
5958b9012e001f455258b9001f012e4459594bb8030153205c58b11f1f45
44b11f1f45445958b90d20001f455258b9001f0d204459592b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b65422b2b45695342014b5058b108004259435c58b108004259161070
3eb0124358b90d193ea51bba00d203eb000b2b59b00a2342b00b2342003f
3f182b103c012f060cb0062342b0072342b0124358b93b21187e1bba0400
01a8000b2b59b00c2342b00d2342b0124358b92d412d411bba0400040000
0b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59
b0102342b0112342002b2b2b2b2b2b2b2b2b2b2b74747575757500184569
444569444569444569447373737373737373757373737373737374004bb0
2a534bb03f515a58b1070745b040604459004bb030534bb03f515a58b10b
0b45b8ffc0604459004bb02e534bb03c515a58b1030345b040604459004b
b02e534bb03c515a58b1090945b8ffc0604459435c58b64f2c014f1f0137
2b7474592b732b2b2b7373742b2b2b2b2b2b2b2b2b2b2b2b74732b2b2b2b
742b000000>
[16173 16065 15681 16357 15501 16301 16041 16313 15577 16217 16321 16113 16205
14693 15885 16301 15973 16349 15529 16157 16361 16365 14439 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 806 73 <0001005d0000034305d3001600c6406a2307012801290b3907df13df1405
1801261236120304010003041503121516161104010000050c0b0c030b09
0e111616230005140000054f0e010e20090114022c031312120404030616
28000a1374140374100201021274151509161658000904740101092f0001
0000b80214b41709cb8c182b2b7a10f201182f5d2b3c012fe42b7a10f101
182f2b3c012fe42f5de42fe4003f2b3c003f3c103c103c10fd3c3fed7187
052e2b0e7d10c400111239123910c90705103c3c07103c3c3130015d715d
005d3313233733373e0233321707262322060707330723035dc1a21da21f
183373634583215c3e35371418ca1dcac1039a8c977164411d9e18356372
8cfc6600>Arial-ItalicMT AddT42Char 
2 1080 74 <00020035fe570484043e00220033011db90026ffe0b310113431b8ffe0b3
10113432b8ffe0403f0e113404311431020418390955266526803505252b
303502251225153f003c1f041616152c17170a0a19280d28181919230a17
140a0a170124000010000200b8028e40330d2f1f140718281706281f0d0a
061f1d0f181809191958090a0a1709161609177f17011f172f178017cf17
045f170100170117b80225b40923201000b801cf401c02208f210121c510
263f0a01000a010a342817100a170a340a265f182b2b103c2b2b3c2b10c0
5d7101e6f65dede510fd2b7af25d5d717201192f2b7ac001182f2b7a10d0
01182f2b7af101182f2b7ac001192f00183fed3fed3f2b3c003fed10f65d
e4870e2e2b057d10c42b11123939870e10c408c43130005d01715d5d2b2b
2b17170616171633323736373706232226353412363332173733030e0223
222626353413141716163332361235342623220e023ab7022225314ea448
2f28128d9fa1d9abec7dd17124a6d62372cb8580b95be7151e6f4459b06d
916b427c6b3760113e3e11165539bf568fedd9b3012c99c6aefbffa9bd68
427f521902536d374d517d010677839b4791ca00>Arial-ItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007004ab10201bb012e000600070237b200
0504b8012eb403000a0704b8012eb5010019080605bb012e000200030143
b3095bbe182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c3130
211121112521112101000400fc2003c0fc400500fb002004c000>Arial-ItalicMT AddT42Char 
Arial-ItalicMT /CharStrings get begin
/f 73 def
/g 74 def
end
Arial-ItalicMT /Encoding get
dup 102 /f put
dup 103 /g put
pop
end
%ADOEndSubsetFont
reset_gvm
/NUEQLC+Arial-ItalicMT /Arial-ItalicMT findfont ct_VMDictPut
/NUEQLC+Arial-ItalicMT*1 
[102{/.notdef}rp /f /g 152{/.notdef}rp]
NUEQLC+Arial-ItalicMT nf
NUEQLC+Arial-ItalicMT*1 [11.28 0 0 -11.28 0 0 ]msf
181.976 443.04 mo
(gf)
[6.29875 0 ]xsh
25.14 350.76 mo
25.2 350.52 li
25.5 350.46 li
101.82 350.46 li
102.06 350.52 li
102.18 350.76 li
102.18 388.98 li
102.06 389.22 li
101.82 389.28 li
25.5 389.28 li
25.2 389.22 li
25.14 388.98 li
cp
25.8 388.98 mo
25.5 388.62 li
101.82 388.62 li
101.46 388.98 li
101.46 350.76 li
101.82 351.12 li
25.5 351.12 li
25.8 350.76 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
34.38 365.64 mo
(Kurucz Sun)
[7.53061 6.27844 3.76292 6.27845 5.64676 5.64677 3.12231 7.53062 6.27844 0 ]xsh
33.1166 382.503 mo
(Atmosphere)
[7.53738 3.14938 9.40969 6.28521 5.65354 6.28521 6.28521 6.28522 3.7697 0 ]xsh
252.96 573.6 mo
297.48 543 li
342 573.6 li
297.48 604.14 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 0 colr
ef
252.78 573.9 mo
252.6 573.6 li
252.78 573.3 li
297.3 542.76 li
297.48 542.7 li
297.66 542.76 li
342.24 573.3 li
342.36 573.6 li
342.24 573.9 li
297.66 604.44 li
297.48 604.5 li
297.3 604.44 li
cp
297.66 603.84 mo
297.3 603.84 li
341.82 573.3 li
341.82 573.9 li
297.3 543.3 li
297.66 543.3 li
253.14 573.9 li
253.14 573.3 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 8424 34 <0002005a0000040c05d3001e00220084402f8c1a8b1b027c1a7c1b02621a
651b026b0c610e025a0c540e02360e440e021b190807040010271111000d
2914011e00b802af40232122213c1f0a1f3c2222203c21211e005e1e6e0a
5e176a24105e201101116a23575a182b10f65ded10f6edf4ed103c10ed3c
10fd003fed3c10f63c3fed12392fe41117393130015d5d5d5d005d5d0126
35343736373e0235342623220607273636333204151406070e0207033533
1501d8011e163124bb38a477739a18b919f7cbd701005a8358361a02b8cd
016924126a4d3a3b2ba5623a699f909916cddaeaa660a2744e4a606cfe97
cdcd>ArialMT AddT42Char 
3 4962 69 <00020086ffe8041f05ba0010001d0180409b01050c0f240535054505053f
1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c1a5d085d
0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e213ec17ec
19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605da1df504
fa100c10150e040602001b1c0607010a151c0e0b1824d00b01100b400b60
0b800b041f400d0d02550b0c0f0f02550b180d0d02550bb8fff6b40c0c02
550bb8fff0b40b0b06550bb8fff4b40f0f06550bb8ffe0b40c0c06550bb8
fff4402f0d0d06550b7401113300040c0c025500040d0d06550033032502
02c001019001a001b001f001041f013f014f010301b8fffeb41010025501
b8fffc401d0e0e0255010c0d0d025501100c0c025501120b0b0255010c0b
0b065501b8fff8b41010065501b8fffc40160f0f065501180c0c06550114
0d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b2b2b5d71723c4d10
fdf42b2be410fd2b2b2b2b2b2b2b2b5d71ed003fed3f3fed3f1139111239
3130005d015d7172007121231133113633321e0215100023222703141716
333236353426232206012da7b472b162af7140fef2bdbc6b0234559176ac
a57576ac05bafdf58f4f8fca73feeffed69d0196bf558bcdcbd0c6cd>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/question 34 def
/b 69 def
end
ArialMT /Encoding get
dup 63 /question put
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two 3{/.notdef}rp /six 2{/.notdef}rp /nine 5{/.notdef}rp /question /.notdef 
/A 6{/.notdef}rp /H /I /.notdef /K 4{/.notdef}rp /P 
/.notdef /R /S 13{/.notdef}rp /a /b /c /.notdef 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
4{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
273.24 569.34 mo
(Is the line)
[3.14825 5.6524 3.18207 3.14825 6.28409 6.28409 3.1821 2.51657 2.51657 6.28409 0 ]xsh
279.241 586.203 mo
(stable?)
[5.65579 3.15164 6.28745 6.28748 2.51996 6.28748 0 ]xsh
139.62 554.52 mo
139.74 554.28 li
139.98 554.16 li
216.3 554.16 li
216.54 554.28 li
216.66 554.52 li
216.66 592.68 li
216.54 592.92 li
216.3 593.04 li
139.98 593.04 li
139.74 592.92 li
139.62 592.68 li
cp
140.34 592.68 mo
139.98 592.32 li
216.3 592.32 li
215.94 592.68 li
215.94 554.52 li
216.3 554.88 li
139.98 554.88 li
140.34 554.52 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
3 13680 89 <0001001a000003e80426000a01eab1020243545840170508000a08060106
0a0005090805010205240f0f0255052f2bddcd10ddcd113333003f3f3f12
3931301bb7350501002211390ab8ffde400d11390916121c340816121c34
02b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400281e2134
0ab8ffe8400922253400162225340ab8ffda407e282e340020282e340f0c
29002809260a3900350a4800470a56015602590858096601660269086909
78007701770279087809770a870187028603890788088a099d009809910a
ac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a2c0a0005
0a1800160a2800260a370a4f00400a09054012163405400b0d34b1060243
5458400905010008060106000ab8fff4400f0d0d06550a000c0d0d065500
050908b8fff440120d0d0655080501020c0d0d06550205050c0b1112392f
dd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a0708082509
0a1409090a0003020225010014010100050a0a000a09080802020106070a
09030001052f0c010c22084040400980090209b8011bb5400580050205b8
011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ede45d1112
3939123939003f3c103c103c3f3c113987052e2b877dc4872e182b877dc4
593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59210133131617
363713330101aefe6cbee4251f182becb9fe6e0426fd84676f54760288fb
da00>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/v 89 def
end
ArialMT /Encoding get
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two 3{/.notdef}rp /six 2{/.notdef}rp /nine 5{/.notdef}rp /question /.notdef 
/A 6{/.notdef}rp /H /I /.notdef /K 4{/.notdef}rp /P 
/.notdef /R /S 13{/.notdef}rp /a /b /c /.notdef 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v 3{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
146.04 569.34 mo
(Remove the )
[8.15996 6.28746 9.41196 6.28746 5.57684 6.29874 3.1223 3.15163 6.28748 6.28748 0 ]xsh
146.345 586.203 mo
(unstable line)
[6.28972 6.28973 5.65805 3.15388 6.28972 6.28973 2.5222 6.28973 3.0016 2.52222 2.5222 6.28972 
0 ]xsh
472.44 248.4 mo
559.8 248.4 li
559.8 210.24 li
472.44 210.24 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .8 1 colr
f
472.08 210.24 mo
472.2 210 li
472.44 209.88 li
559.8 209.88 li
560.04 210 li
560.16 210.24 li
560.16 248.4 li
560.04 248.64 li
559.8 248.76 li
472.44 248.76 li
472.2 248.64 li
472.08 248.4 li
cp
472.8 248.4 mo
472.44 248.04 li
559.8 248.04 li
559.44 248.4 li
559.44 210.24 li
559.8 210.6 li
472.44 210.6 li
472.8 210.24 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
496.92 225.06 mo
(Kurucz)
[7.53287 6.2807 3.7652 6.2807 5.64899 0 ]xsh
477.18 241.923 mo
(Solar Spectrum)
[7.53738 6.28522 2.5177 6.28522 3.76968 3.06137 7.53741 6.28522 6.28522 5.6535 3.14941 3.76965 
6.28522 0 ]xsh
259.14 178.08 mo
335.46 178.08 li
335.46 139.92 li
259.14 139.92 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .71 .082 colr
f
258.78 139.92 mo
258.9 139.68 li
259.14 139.56 li
335.46 139.56 li
335.7 139.68 li
335.82 139.92 li
335.82 178.08 li
335.7 178.32 li
335.46 178.44 li
259.14 178.44 li
258.9 178.32 li
258.78 178.08 li
cp
259.5 178.08 mo
259.14 177.72 li
335.46 177.72 li
335.1 178.08 li
335.1 139.92 li
335.46 140.28 li
259.14 140.28 li
259.5 139.92 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 10850 41 <000100a80000048505ba0009008d402b06051e08088f070107070003041e
0201020008079c2002200b02021a0b0409200120000100201010025500b8
fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b
065500b8fffeb40c0c065500b8fff0400a0d0d0655005d0a3b5c182b4e10
f42b2b2b2b2b2b2b5d3c4dfd3c4e10f65d4de4003f3f3cfd3c12392f5d3c
10fd3c313033112115211121152111a803ddfce502b0fd5005baadfe3aad
fd66>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/F 41 def
end
ArialMT /Encoding get
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two 3{/.notdef}rp /six 2{/.notdef}rp /nine 5{/.notdef}rp /question /.notdef 
/A 4{/.notdef}rp /F /.notdef /H /I /.notdef /K 
4{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp /a /b 
/c /.notdef /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v 3{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
284.46 163.14 mo
(IRAF)
[3.12344 8.13174 7.51144 0 ]xsh
297.6 38.16 mo
297.66 60.0601 li
296.94 60.0601 li
296.88 38.16 li
cp
299.4 59.34 mo
297.3 63.6 li
295.2 59.34 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
259.14 252.72 mo
335.46 252.72 li
335.46 203.22 li
259.14 203.22 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 .2 colr
f
258.78 203.28 mo
258.9 202.98 li
259.14 202.92 li
335.46 202.92 li
335.7 202.98 li
335.82 203.28 li
335.82 252.72 li
335.7 252.96 li
335.46 253.08 li
259.14 253.08 li
258.9 252.96 li
258.78 252.72 li
cp
259.5 252.72 mo
259.14 252.36 li
335.46 252.36 li
335.1 252.72 li
335.1 203.28 li
335.46 203.58 li
259.14 203.58 li
259.5 203.28 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 4632 22 <00010056ffe6041605c0002b0159b10202435458400b1918400d0d025518
1c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e1c041e29
1c05290d230d0c181901001220100c0c0255200726b8ffe8b40c0d025526
2f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610c6123910
c42b3210c42b3231301b4028050d160d450d860d0445115711761b035216
6c106a146416750d7914860d8a14891ba50d0a052003b8ffe0400b0b0c0d
0e040701230d0c01b802a4b340000100bb01180029000d0135b40c0c1504
18ba02a4001902684027151e1c05041e290d12735f206f200220180d0d06
55208007732640212334302601002610260226b8fff4b70d0d065526902d
18b80138b219d301ba01380000ffc0400b212334200040000200902cb801
92b18b182b10f65d2bedf4ed10f62b5d712bedf42b5ded003fed3fedfde4
1112392fed10fd5de411123901111217393130013838015d005d01715913
371616333236353426232207371633323635342623220607273636333216
1615140607161615140023222656b41f956b7fafa27d334c14120b73b886
6a698c14b421eaae78ca6b66648290fee8d6c1ff0183189987b0827ca114
9e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5e6>ArialMT AddT42Char 
2 5106 23 <0002001a0000041005ba000a000d0126403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6b40d0d
02550ab8ffeeb40d0d06550ab80137400d07402223340780213507900f02
b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ffe4b60d
0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b2b3c10
e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c40f0f0f
313001435c58b9000dffdeb212390db8ffd4400b333903222d3903041d1d
3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c221c39
0c402d392b2b2b2b2b5921112135013311331523110311010296fd84029d
93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/three 22 def
/four 23 def
end
ArialMT /Encoding get
dup 51 /three put
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two /three /four /.notdef /six 2{/.notdef}rp /nine 5{/.notdef}rp 
/question /.notdef /A 4{/.notdef}rp /F /.notdef /H /I 
/.notdef /K 4{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp 
/a /b /c /.notdef /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v 3{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
265.8 217.44 mo
(1)sh
NUEQLB+ArialMT*1 [7.56 0 0 -7.56 0 0 ]msf
272.1 213.72 mo
(st)
[3.78 0 ]xsh
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
281.1 217.44 mo
(selection)
[5.65466 6.28635 2.51883 6.28635 5.65466 3.15048 2.51883 6.28635 0 ]xsh
270.903 234.303 mo
(list of lines)
[2.51657 2.51657 5.6524 3.14825 3.12228 6.28409 3.14825 3.17871 2.51657 2.51657 6.28409 6.28409 
0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
277.56 247.98 mo
(\(364 lines\) )
[2.79935 4.686 4.68597 4.686 2.34174 1.86035 1.86035 4.68597 4.686 4.263 2.79935 0 
]xsh
259.38 520.14 mo
335.76 520.14 li
335.76 481.98 li
259.38 481.98 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .71 .082 colr
f
259.08 481.98 mo
259.14 481.74 li
259.38 481.62 li
335.76 481.62 li
336 481.74 li
336.12 481.98 li
336.12 520.14 li
336 520.38 li
335.76 520.5 li
259.38 520.5 li
259.14 520.38 li
259.08 520.14 li
cp
259.74 520.14 mo
259.38 519.78 li
335.76 519.78 li
335.4 520.14 li
335.4 481.98 li
335.76 482.34 li
259.38 482.34 li
259.74 481.98 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 2360 10 <0001005a03b3012705ba0005002640150005030105ee0200038120019001
02016a0671a7182b10f65ded003fed01111239393130130335331503882e
cd3003b30112f5f5feee>ArialMT AddT42Char 
2 11032 42 <0001006dffe705b905d300250113401a1b141b15026027015e0813011203
2424002112170225001e0201b8ffc040200c0c0655010106171e0e03211e
06090101262725242003032002202760020302b8ffe4b40f0f025502b8ff
f2b40d0d025502b8ffdab40c0c025502b8fff4401b0c0c06550272802701
271d26200a010a100c0c06550a1926635b182b4e10f42b5d4ded4d105df6
2b2b2b2b5d3c4d10fd3c1112392f003fed3fed12392f2b3cfd3c11123911
123901111239123931304379404404231b1c1a1c191c03060c2610251526
1f26082504262325180d1d2100160f1321011112141320071d2100220525
21011c0b17210114111721011e092121002403212100002b2b2b2b012b2b
103c103c2b2b2b2b2b2b2b2b2b2a81015d005d0135251106042322240235
3412243332041617072e02232206060706151412043332363711034c026d
8ffed0a0d8fe9fb4b30150db9f01019226af2162b66f85c2772138870102
917ef03e023fac01fde07273b9015ed8d60173b467b8943070804d51844f
889fc4fef88061370111>ArialMT AddT42Char 
2 12858 48 <000100980000060f05ba001002e4b10202435458b90008fff6400b0c0c02
55080e0d11025502b8ffeeb40d11025505b8ffee40280d1102550c120c0c
0255050f0c030900010208090b0e000809020a0b06101002550b100d0d02
550bb8fffab60c0c02550b1000b8ffe6b41010025500b8fff8b40f0f0255
00b8fffcb40d0d0255002f2b2b2bcd2f2b2b2bcd003f3fc0c010d0d0c011
1217392b2b3130012b2b2b001bb10602435458401f07200b0b065506200b
0b065503200b0b065504200b0b065505200b0b065508b8fff240230b0b06
55020c0b0b065503060c0c0655020e0c0c0655090c0c0c06550a0c0c0c06
5507b8fff8b40d0d065508b8fff8401f0d0d06552605010c200a12340f20
0a12340f050c0300010e0b00080801020ab8ffeeb40b0b06550ab8ffeeb4
0c0c06550abb0256001200100256400d000c0b0b065500060c0c065500b8
fff8b40d0d065500012f2b2b2bf42ff42b2b003f3c3f3c3c111217392b2b
5d3130012b2b2b2b2b2b2b2b002b2b2b2b2b1b407f00020f0814021b0804
760c860cc80c03090c490c490f032904250d2c0e58035b04760d780e870d
080b020508390d360e4f024b03440740084d0d420e0a9802990396079608
a803a7070612020f0e0e30050214050502080c0d0d300508140505080c52
0f5201400102020808090a0b0b0d0d0e0e1000080902601280120212ba02
a8000d0131b2052008b80131400a0c090a20400c7f0b010bba0256000e01
0bb2052002b8010b40090f0100200f70100110b80256b720056005800503
05b802a8b3113b59182b1910f45df45d3c18fd3c10ed1a1910edf45d3c1a
18fd3c10ed1a1910ede45d00183f3f3c3c103c103c103c103c103c103c1a
10eded87052e2b877dc4872e182b877dc43130004bb00b534bb01e515a58
bd000cfffb0008ffd60002ffd638383859014bb00c534bb028515a58b900
0dfff8b10e0a38385901435c58b9000dffd4b621390e2c21390db8ffd4b6
37390e3237390db8ffd4b52d390e2c2d392b2b2b2b2b2b5972715d00715d
015d59593311210116173637012111231101230111980124015b30161935
015f0105bbfe56affe5805bafbf29148509b03fcfa4604cbfb3504e0fb20
>ArialMT AddT42Char 
2 14094 50 <00020063ffe705dd05d4000e001b00ca40501a0f01141014141b171b1b04
041004140b170b1b04a917b60ec60e031717181b02201d40114f134f1740
1a58055809571055115f135a175f18561a571b8b17990210191e0303121e
0b09152620070107b8ffe8b41010025507b8ffeeb40d0d025507b8fff0b4
0c0c025507b8ffeab40b0b065507b8fff4b40d0d065507b8fffa40210c0c
0655071a801d011d0f2620000100060b0b065500060c0c065500191c635c
182b4e10f42b2b5d4ded4e105df62b2b2b2b2b2b5d4ded003fed3fed3130
015d71005d5d5d7113100021320412151402042322240237100033320011
3402262322006301880136cb0146abb4feb6bfcffebaa8c8011dd7db011b
79e991cefed702ca016d019dc2fea5dcdffea0b5c8015abefef7fecf0134
011bb3010b93fee5>ArialMT AddT42Char 
3 5876 71 <00020046ffe803df05ba0011001d015540a40a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b1833010025110f2510
10d011011011401160118011041f400b0b02551f400d0d02551112101002
5511b8fff440110f0f025511060e0e025511180d0d025511b8fff2400b0b
0b0655110e1010065511b8ffeeb40c0c065511b8fff840420d0d06551174
1224bf07cf07df07ff07041f073f074f0703071e0b0b025507180c0c0255
071e0d0d0255070c0b0b0655070c0d0d0655071a0c0c065507191e345018
2b4e10f42b2b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d713c10ed
10fd3ce4003fed3f3c3fed3f3c11391112393130005d01715d0071213506
232226263534123633321617113311011416333236353426232206033865
c47fd5756ad48360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a
5141020efa460212cccac1c6daccc400>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/quotesingle 10 def
/G 42 def
/M 48 def
/O 50 def
/d 71 def
end
ArialMT /Encoding get
dup 39 /quotesingle put
dup 71 /G put
dup 77 /M put
dup 79 /O put
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /.notdef /six 2{/.notdef}rp /nine 
5{/.notdef}rp /question /.notdef /A 4{/.notdef}rp /F /G /H 
/I /.notdef /K /.notdef /M /.notdef /O /P 
/.notdef /R /S 13{/.notdef}rp /a /b /c /d 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v 3{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
279.66 498.9 mo
(MOOG)
[9.39163 8.77133 8.77133 0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
272.7 512.58 mo
('abfind' driver)
[1.59973 4.68768 4.68768 2.33582 1.86203 4.68771 4.68768 1.59973 2.34174 4.68768 2.80103 1.86206 
4.25623 4.68768 0 ]xsh
139.5 388.92 mo
215.88 388.92 li
215.88 350.76 li
139.5 350.76 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .71 .082 colr
f
139.2 350.76 mo
139.26 350.52 li
139.5 350.46 li
215.88 350.46 li
216.12 350.52 li
216.18 350.76 li
216.18 388.98 li
216.12 389.22 li
215.88 389.28 li
139.5 389.28 li
139.26 389.22 li
139.2 388.98 li
cp
139.86 388.98 mo
139.5 388.62 li
215.88 388.62 li
215.52 388.98 li
215.52 350.76 li
215.88 351.12 li
139.5 351.12 li
139.86 350.76 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
3 14222 90 <00010006000005b704260012041db10202435458b90012fff440110d0d02
5507060d0d025500060d0d02550ab8ffd4b40c0d025504b8ffe8400b0c0d
025511200c0d02550ab8ffc0b40e10025504b8ffc0402f0e10025511400e
100255040a110301000c06070601060f0a000a0d0c060c0c02550c110102
040a04110a0c0c025511b8fff8b40d0d0255112f2b2bcdcd10d6cd10d42b
cd003f3f3f3f3f111217393130002b2b2b2b2b2b012b2b2b1b40160f1401
2a04290a024a115b118e110311200d0d06550ab8ffe0b40d0d065504b8ff
e0b40d0d065511b8fff040091f2134101c1d273409b8fff040b71f243404
060c0913061b09191205040004060b090b0e08121000130314071c081b0b
1d0e240025072a082b0e340035073a083b0e4403470640074d084b0b430f
47114a125b0f52126b076408671279067a077408b906ba0fb612f506fb09
280b112800280d270e280f27122f1438003712770886089803970ca701a8
02a80ba60cb500b606ba0ec804d606d909e804e80fe712f406fa091c0b06
0d0d06550c060d0d065510060d0d06550e060d0d06550f060d0d065512b1
0602435458401b0a0e0f0412001108070825070f250e122500000e07030d
010c250db8ffd640370b0b06550d0225012a0b0b0655010d011413060a0b
11260a2b115404520a5c116c117c118a110a110a040300010f0a000a0c06
07060106003f3f3f3f3f111217395d01111239392f2bf42f2bf411121739
10e410e410e41112391112391112391b40140305050206070705090a0a08
0b0c0c0a1011110fb8ff4bb305001220b8ff4940660a0f0e20c311070820
071112122b0507140505070e0a0c0c250d0e140d0d0e08110f0f2b0a0814
0a0a080005020225010014010100000201071204080f110c0e0d0a110a04
03120d0c0c0808070702020106120f0f0e0e000a14f6100d01600d700d80
0d030db801a7400a204f0a016f0a7f0a020ab8025540094f11016f117f11
0211b80255400b1005016005700580050305b801a7b501f613f666182b4e
10f4194df45d5d18fd5d71fd5d711a19fd5d5d18e6003f3c103c103c3f3c
103c103c103c103c1217390111123939123939113939123939874d2e2b87
7dc4872e182b877dc4872e182b877dc4872e182b877dc42b2b2b870e10c4
070e103c070e103c870e10c4870e10c44bb01f5358b40d200c2002bcffe0
0001ffe0000effd0b400300f2012b8ffe0013838383838383838594bb034
5358b90008ffd0b10730013838594bb021534bb033515a58b90008ffe0b1
0720013838594bb012534bb01e515a58b9000effd0b60f200d200c2008b8
ffd0b2073012b8ffe0b2003802baffe00001ffe001383838383838383838
38594bb012534bb017515a58b90011ffe0b30a2004200038383859593130
01435c58b9000effd4b61239002c123900b8ffd4b113392b2b2b592b2b2b
2b2b5d71722b2b2b002b2b2b715d015d5921013313173637133313173713
330123032703014bfebbbaa93f0433a9b99f353db6affeb4bba929d70426
fd9be411ca026efd98cbcd0266fbda027cb5fccf>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/w 90 def
end
ArialMT /Encoding get
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /.notdef /six 2{/.notdef}rp /nine 
5{/.notdef}rp /question /.notdef /A 4{/.notdef}rp /F /G /H 
/I /.notdef /K /.notdef /M /.notdef /O /P 
/.notdef /R /S 13{/.notdef}rp /a /b /c /d 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w 2{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
159.78 367.74 mo
(MOOG)
[9.39165 8.77132 8.77133 0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
152.16 381.42 mo
('ewfind' driver)
[1.59889 4.68684 5.93892 2.34341 1.86121 4.68683 4.68684 1.59889 2.46101 4.68684 2.80019 1.86121 
4.25539 4.68684 0 ]xsh
259.08 396 mo
335.46 396 li
335.46 343.74 li
259.08 343.74 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 .2 colr
f
258.72 343.74 mo
258.78 343.44 li
259.08 343.38 li
335.46 343.38 li
335.7 343.44 li
335.82 343.74 li
335.82 396 li
335.7 396.24 li
335.46 396.36 li
259.08 396.36 li
258.78 396.24 li
258.72 396 li
cp
259.38 396 mo
259.08 395.64 li
335.46 395.64 li
335.1 396 li
335.1 343.74 li
335.46 344.1 li
259.08 344.1 li
259.38 343.74 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 6542 27 <00030053ffe7041905c00017002300300200b10202435458b40c001b1e2e
b8ffc04017131302552e2e12211e0605281e120d1e090c0c0c025509b8ff
f4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b02550fb8ffe8
b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503b8fff440
190d0d02550324150c0b0b0255150c0c0c0255150c0d0d0255152f2b2b2b
cd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed393931301b
b10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0fb8ffe4b4
0f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8fffc4022
0d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12211e0605
281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b2bcd2f2b
2bcd31301b4037351601291649164926e60ce930050930017d007d017c04
7408710b720c750d7a178b008a018c048608810b840c860d8d17cc11c613
1222b8ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0401e2920
0c001e18000c1b1e2ea02e012e12211e0605281e120d1e73bf090109b802
6740102b730f40202334300f01000f100f020fb80191b6321873b0030103
b80267b2247315b8ffc0400e2123342015401502159031c78b182b10f65d
2bedf45ded10f45d712bedf45ded003fed3fed12395d2fed393901111239
393130013838383838383838015d72710071595901262635343633321615
140607161615140023220035343613141633323635342623220603141616
333236353426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef6916286
6b6885896667883a49905381a8ad827fa7031b29986aa0dadfa06697292c
c488bcff000101c08fc101546884835f638784fcff4d904fa68082aaa800
>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/eight 27 def
end
ArialMT /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /.notdef /six /.notdef /eight 
/nine 5{/.notdef}rp /question /.notdef /A 4{/.notdef}rp /F /G 
/H /I /.notdef /K /.notdef /M /.notdef /O 
/P /.notdef /R /S 13{/.notdef}rp /a /b /c 
/d /e /f /g /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w 2{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
264.54 359.28 mo
(2)sh
NUEQLB+ArialMT*1 [7.56 0 0 -7.56 0 0 ]msf
270.84 355.56 mo
(nd)
[4.19882 0 ]xsh
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
282.24 359.28 mo
(selection)
[5.65466 6.28635 2.51883 6.28632 5.65466 3.15051 2.51883 6.28635 0 ]xsh
270.836 376.143 mo
(list of lines)
[2.51657 2.51657 5.6524 3.14825 3.12228 6.28409 3.14825 3.17871 2.51657 2.51657 6.28409 6.28406 
0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
277.5 389.82 mo
(\(284 lines\) )
[2.79935 4.686 4.68597 4.686 2.34174 1.86035 1.86035 4.68597 4.686 4.263 2.79935 0 
]xsh
297.66 318.36 mo
297.6 340.2 li
296.88 340.2 li
296.94 318.36 li
cp
299.34 339.48 mo
297.24 343.74 li
295.14 339.48 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
472.26 229.62 mo
338.46 160.92 li
338.76 160.26 li
472.62 229.02 li
cp
338.28 162.84 mo
335.46 159 li
340.2 159.06 li
f
297.6 114.48 mo
297.66 136.38 li
296.94 136.38 li
296.88 114.48 li
cp
299.4 135.66 mo
297.3 139.92 li
295.2 135.66 li
f
297.66 178.08 mo
297.72 199.74 li
297 199.74 li
296.94 178.08 li
cp
299.52 199.02 mo
297.42 203.22 li
295.26 199.02 li
f
259.14 318.36 mo
335.46 318.36 li
335.46 280.2 li
259.14 280.2 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .71 .082 colr
f
258.78 280.2 mo
258.9 279.96 li
259.14 279.84 li
335.46 279.84 li
335.7 279.96 li
335.82 280.2 li
335.82 318.36 li
335.7 318.6 li
335.46 318.72 li
259.14 318.72 li
258.9 318.6 li
258.78 318.36 li
cp
259.5 318.36 mo
259.14 318 li
335.46 318 li
335.1 318.36 li
335.1 280.2 li
335.46 280.56 li
259.14 280.56 li
259.5 280.2 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 10654 40 <000100a2000004e805ba000b0095401506051e080807070003041e020102
0a091e0b000807b8ffc0401d1012340754034a200a200d020a1a0d040920
0120000100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8
fffab40c0c025500b8fffab40c0c065500b8fff0400a0d0d0655005d0c3b
5b182b4e10f42b2b2b2b2b2b5d3c4dfd3c4e10f65d4df4e42b003f3cfd3c
3f3cfd3c12392f3c10fd3c3130331121152111211521112115a20424fc9e
032bfcd5038405baadfe3facfe0dad00>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/E 40 def
end
ArialMT /Encoding get
dup 69 /E put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /.notdef /six /.notdef /eight 
/nine 5{/.notdef}rp /question /.notdef /A 3{/.notdef}rp /E /F 
/G /H /I /.notdef /K /.notdef /M /.notdef 
/O /P /.notdef /R /S 13{/.notdef}rp /a /b 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w 2{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
281.94 303.42 mo
(ARES)
[7.50919 8.12949 7.50919 0 ]xsh
246.6 649.98 mo
246.6 636.66 257.46 625.8 270.78 625.8 cv
324.18 625.8 li
337.56 625.8 348.36 636.66 348.36 649.98 cv
348.36 663.36 337.56 674.22 324.18 674.22 cv
270.78 674.22 li
257.46 674.22 246.6 663.36 246.6 649.98 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 .2 colr
ef
246.24 650.04 mo
246.3 648.78 li
246.36 647.52 li
246.54 646.26 li
248.171 634.849 258.033 626.001 269.52 625.5 cv
270.78 625.44 li
324.18 625.44 li
336.208 625.389 346.703 634.34 348.42 646.26 cv
348.6 647.46 li
348.72 648.72 li
348.72 651.24 li
348.017 663.439 338.815 673.081 326.7 674.46 cv
324.18 674.58 li
270.78 674.58 li
265.938 674.573 261.1 673.109 257.1 670.38 cv
256.14 669.72 li
255.18 668.94 li
251.192 665.694 248.297 661.143 247.02 656.16 cv
246.72 654.96 li
246.54 653.76 li
246.36 652.5 li
246.3 651.3 li
cp
246.96 651.24 mo
247.08 652.44 li
247.2 653.64 li
247.44 654.78 li
249.659 665.834 259.494 673.886 270.78 673.86 cv
324.18 673.86 li
325.38 673.8 li
337.032 673.373 346.785 664.011 347.88 652.44 cv
348 651.24 li
348 648.78 li
347.88 647.58 li
346.814 635.949 337.017 626.732 325.38 626.16 cv
270.84 626.16 li
259.044 626.096 249.063 634.755 247.2 646.38 cv
247.08 647.58 li
246.96 648.78 li
246.96 649.98 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 5458 24 <00010055ffe7042105a6001e0156b10202435458b90001ffc0400d0d0d02
55011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab4
0f0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffd
c410c42b31301b4029120c0d0d06550f0c0d0d06554b1a791d8a1d9613a7
13c30cd60cdb1b080913180e2a1a03093005300bbaffe00003ffe0401013
0a15121313ca0e0f140e13140e0f0db802a440130e0a1e15400ea00e020e
0e0f40150115151c12b802bbb70f0401d340000100b801184020041e1c0d
115f106f107f108f1004108007731840212334301801001810180218b8ff
f4b70d0d065518902012bc0135000f0195000d0138b20eb501ba01380000
ffc0400b212334200040000200901fb80192b18b182b10f65d2bedf4edf4
ed10f62b5d712bedf45d3c003fedfd5de43fed12392f5d11392f5d10ed10
e487082e2b057d10c4001112393130013838383801715d2b2b5913371616
33323635342623220607271321152103363332001514070623222655bd15
996c82b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a
8bc4a29ab24f3f1602f1acfe765cfef6d1c791b2e000>ArialMT AddT42Char 
2 12720 47 <000100960000042a05ba0005006d400c010204031e05000820040104b802
a7400f070203200120000100201010025500b8fff6b40f0f025500b8fff6
b40d0d025500b8fffab40c0c025500b8fff6b40c0c065500b8fff8400a0d
0d0655005d063b5c182b10f62b2b2b2b2b2b5d3cfd3c10e65d003f3cfd3c
3f313033113311211596c202d205bafaf3ad>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/five 24 def
/L 47 def
end
ArialMT /Encoding get
dup 53 /five put
dup 76 /L put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /five /six /.notdef /eight 
/nine 5{/.notdef}rp /question /.notdef /A 3{/.notdef}rp /E /F 
/G /H /I /.notdef /K /L /M /.notdef 
/O /P /.notdef /R /S 13{/.notdef}rp /a /b 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w 2{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [12.72 0 0 -12.72 0 0 ]msf
270.24 638.94 mo
(Final List )
[7.76419 2.81622 7.06467 7.0647 2.81619 3.48276 7.06467 2.81622 6.35236 3.52853 0 ]xsh
277.325 657.842 mo
(of lines)
[7.07614 3.53998 3.48273 2.82767 2.82764 7.07614 7.07614 0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
277.74 672.06 mo
(\(159 lines\) )
[2.79935 4.686 4.68597 4.686 2.34174 1.86035 1.86035 4.68597 4.686 4.263 2.79935 0 
]xsh
252.72 25.44 mo
252.72 18.36 258.36 12.66 265.44 12.66 cv
329.04 12.66 li
336.06 12.66 341.76 18.36 341.76 25.44 cv
341.76 32.46 336.06 38.16 329.04 38.16 cv
265.44 38.16 li
258.36 38.16 252.72 32.46 252.72 25.44 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.682 .812 0 colr
ef
252.36 25.44 mo
252.36 24.72 li
252.42 24.06 li
252.48 23.46 li
253.442 17.311 258.51 12.695 264.72 12.36 cv
329.04 12.36 li
335.43 12.272 340.967 17.098 341.94 23.4 cv
342.06 24.06 li
342.06 24.72 li
342.12 25.38 li
342.06 26.1 li
341.829 32.396 336.673 37.888 330.36 38.4 cv
329.7 38.46 li
265.44 38.46 li
262.896 38.491 260.846 37.873 258.66 36.6 cv
257.58 35.88 li
255.191 34.018 253.473 31.646 252.78 28.68 cv
252.6 28.08 li
252.48 27.42 li
252.42 26.76 li
252.36 26.1 li
cp
253.08 26.04 mo
253.08 26.64 li
253.2 27.3 li
253.32 27.9 li
254.477 33.735 259.553 37.721 265.44 37.8 cv
329.04 37.8 li
329.64 37.74 li
335.717 37.518 340.707 32.736 341.34 26.7 cv
341.4 26.04 li
341.4 24.78 li
341.34 24.18 li
340.73 18.11 335.812 13.41 329.7 13.08 cv
329.04 13.02 li
265.44 13.02 li
259.286 13.128 254.174 17.397 253.2 23.52 cv
253.14 24.12 li
253.08 24.78 li
253.02 25.38 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 10326 39 <0002009e0000055a05ba000f001d00e5402f201f0143081c1d1e02010211
101e0f000817262009011f400d0d0255092010100255090a0f0f02550918
0d0d025509b8fff440150c0c0655091a1f1d102001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d1e3b5c182b10f62b2b2b2b2b
2b5d3cfd3c10f62b2b2b2b2b5ded003f3cfd3c3f3cfd3c31304379403603
1b0708060805080408040619181a1802060b0a0c0a0d0a03061516141613
1603061b03172101120e17210118081c2101160a1121002b2b012b2b2a2a
2a2a81015d3311213217161716121514020e022325213236373636353426
272623219e01f9ab5a7e5974734e7a91cd85feb1013991a531454d976c4e
adfecc05ba151d4c62fecfc4a7fefea96132ad363145e9a6e6f72a1e>ArialMT AddT42Char 
3 1148 57 <000100090000054605ba000a013eb1020243545840120501000802010200
080a00050908050102052fddcd10ddcd113333003f3f3f11123931301b40
242f05012a002803250a2f0c300c600c89088909900cc00cf00c0b200c50
0c0204020b0802b10602435458b709010c0b00080102003f3f0111123939
1b40240a0909200805140808050001012002051402020509010205e9200a
000809650801650208b8ffc0400b2839500801800890080208b80101400d
024028395f02018f029f020202b8010140112005500502300560059005c0
05f0050505b80288b30b60a8182b1910f45d71e45d712be45d712b1810ed
10ed003f3c1a19ed183f3c87052e2b7d10c4872e182b7d10c4014bb00b53
4bb014515a58b2000f0ab8fff1b2091201b8fff1b2081402b8ffee383838
38383859014bb028534bb036515a58b90000ffc03859593130015d715d00
5d5921013301161736370133010241fdc8d2017d2e1f222d018cc6fdc205
bafbd7807078780429fa4600>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/D 39 def
/V 57 def
end
ArialMT /Encoding get
dup 68 /D put
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /five /six /.notdef /eight 
/nine 5{/.notdef}rp /question /.notdef /A 2{/.notdef}rp /D /E 
/F /G /H /I /.notdef /K /L /M 
/.notdef /O /P /.notdef /R /S 2{/.notdef}rp /V 
10{/.notdef}rp /a /b /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/.notdef /r /s /t /u /v /w 2{/.notdef}rp 
/z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [12.72 0 0 -12.72 0 0 ]msf
281.1 30.1197 mo
(VALD)
[7.49982 8.4538 7.07996 0 ]xsh
297.6 520.5 mo
297.54 520.5 li
297.9 520.14 li
297.9 539.46 li
297.18 539.46 li
297.18 520.14 li
297.3 519.9 li
297.54 519.78 li
297.6 519.78 li
cp
299.64 538.8 mo
297.48 543 li
295.38 538.74 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
472.44 318 mo
559.8 318 li
559.8 279.84 li
472.44 279.84 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .8 1 colr
f
472.08 279.84 mo
472.2 279.6 li
472.44 279.48 li
559.8 279.48 li
560.04 279.6 li
560.16 279.84 li
560.16 318 li
560.04 318.24 li
559.8 318.36 li
472.44 318.36 li
472.2 318.24 li
472.08 318 li
cp
472.8 318 mo
472.44 317.64 li
559.8 317.64 li
559.44 318 li
559.44 279.84 li
559.8 280.2 li
472.44 280.2 li
472.8 279.84 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
2 10012 38 <00010066ffe7057605d3001d00d3b563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc0402d2839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f1726200801080c0b0b06
5508191e635c182b4e10f42b5d4ded4e10f65d4dedf4ed003fed3fed1117
393130012b2b5d5d71005d2b2b0172011706042322240235341224333204
17072626232206021514121633323604b4c23dfec3e5edfed79baf0143c2
dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155b1e0
cb2da092a2feef91bbfee98abc00>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/C 38 def
end
ArialMT /Encoding get
dup 67 /C put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /five /six /.notdef /eight 
/nine 5{/.notdef}rp /question /.notdef /A /.notdef /C /D 
/E /F /G /H /I /.notdef /K /L 
/M /.notdef /O /P /.notdef /R /S 2{/.notdef}rp 
/V 10{/.notdef}rp /a /b /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
2{/.notdef}rp /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
480 294.66 mo
(HARPS Ceres)
[8.14642 7.52609 8.14642 7.52609 7.52612 3.06134 8.14642 6.27393 3.75842 6.27393 0 ]xsh
477.18 311.523 mo
(Solar Spectrum)
[7.53738 6.28522 2.5177 6.28519 3.76971 3.06137 7.53738 6.28522 6.28522 5.65356 3.14935 3.76971 
6.28522 0 ]xsh
472.44 299.28 mo
339 299.64 li
339 298.92 li
472.44 298.56 li
cp
339.72 301.38 mo
335.46 299.28 li
339.72 297.12 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
472.62 229.62 mo
338.76 297.96 li
338.46 297.36 li
472.32 229.02 li
cp
340.2 299.22 mo
335.46 299.28 li
338.28 295.44 li
f
297.84 604.14 mo
297.9 622.26 li
297.18 622.26 li
297.12 604.14 li
cp
299.7 621.54 mo
297.6 625.8 li
295.44 621.54 li
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ArialMT gcheck setglobal} if
4 0 92 <00010021fe5103ee0426001a01f7b10202435458401d0a140f030b031c19
0f12060b061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a
1910dd1a18cd003f3f3fed12173931301bb30f1c010fb8ffde406d1c3928
14560faf0a03400d400f020f202830341020283034070c0912160d181227
0b270c270d360c360d350e99110b28122813481659125913591569126913
69157906760d79117a147a15850d8a118c128c138914980aa80bbc10bb11
ba14ea0ae714f50dfd10f914ff1c1e12b106024354584016130b1c1b040f
440f840f030f190b031c190f12060b06003f3f3fed1112395d0111123939
1b40370f0f0c101112120a00031914131325120a1412120a0f0c0f110c25
0b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021cb802
3fb50f1340124014b80254400b3f124012025f12bf120212b80142b60f01
2200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020cb801
42b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a1910
ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c103c
87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c44bb0
0e534bb018515a58bb000cffe8000bffe80138385959313001435c58b900
14ffdeb637390a2237390eb8ffe8b51539112215392b2b2b2b595d712b2b
00715d2b015d591327163332363736373637013313161736371333010607
060623227f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c412430
7c5634fe67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300
>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/y 92 def
end
ArialMT /Encoding get
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NUEQLB+ArialMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 6{/.notdef}rp /zero 
/one /two /three /four /five /six /.notdef /eight 
/nine 5{/.notdef}rp /question /.notdef /A /.notdef /C /D 
/E /F /G /H /I /.notdef /K /L 
/M /.notdef /O /P /.notdef /R /S 2{/.notdef}rp 
/V 10{/.notdef}rp /a /b /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y /z 133{/.notdef}rp]
NUEQLB+ArialMT nf
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
234.54 567.42 mo
(no)
[4.67838 0 ]xsh
305.223 615.599 mo
(yes)
[4.0202 4.68005 0 ]xsh
297.66 252.72 mo
297.72 276.66 li
297.06 276.66 li
296.94 252.72 li
cp
299.52 275.94 mo
297.42 280.2 li
295.26 275.94 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
63.96 318 mo
64.08 347.22 li
63.36 347.28 li
63.3 318 li
cp
65.82 346.56 mo
63.72 350.76 li
61.62 346.56 li
f
177.78 318.36 mo
177.72 318.36 li
178.08 318 li
178.08 347.28 li
177.36 347.28 li
177.36 318 li
177.48 317.76 li
177.72 317.64 li
177.78 317.64 li
cp
179.88 346.56 mo
177.72 350.76 li
175.62 346.5 li
f
259.32 456.54 mo
335.64 456.54 li
335.64 418.38 li
259.32 418.38 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .71 .082 colr
f
258.96 418.38 mo
259.08 418.14 li
259.32 418.02 li
335.64 418.02 li
335.88 418.14 li
336 418.38 li
336 456.54 li
335.88 456.78 li
335.64 456.9 li
259.32 456.9 li
259.08 456.78 li
258.96 456.54 li
cp
259.68 456.54 mo
259.32 456.18 li
335.64 456.18 li
335.28 456.54 li
335.28 418.38 li
335.64 418.74 li
259.32 418.74 li
259.68 418.38 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
NUEQLB+ArialMT*1 [11.28 0 0 -11.28 0 0 ]msf
282.12 435.3 mo
(ARES)
[7.50919 8.12949 7.50919 0 ]xsh
NUEQLB+ArialMT*1 [8.46 0 0 -8.46 0 0 ]msf
279.6 448.98 mo
(\(20 stars\))
[2.80106 4.68768 4.68768 2.34171 4.25623 2.34427 4.68768 2.80106 4.25623 0 ]xsh
259.08 370.2 mo
219.36 370.32 li
219.36 369.6 li
259.08 369.54 li
cp
220.08 372.06 mo
215.88 369.96 li
220.08 367.8 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
215.52 298.56 mo
237.48 298.56 li
237.72 298.68 li
237.78 298.92 li
237.78 501.06 li
237.48 500.7 li
255.9 500.7 li
255.9 501.42 li
237.48 501.42 li
237.18 501.3 li
237.12 501.06 li
237.12 298.92 li
237.48 299.28 li
215.52 299.28 li
cp
255.18 498.96 mo
259.38 501.06 li
255.18 503.16 li
f
101.82 369.54 mo
120.66 369.54 li
120.9 369.6 li
121.02 369.84 li
121.02 369.96 li
120.66 369.6 li
136.02 369.6 li
136.02 370.32 li
120.66 370.32 li
120.42 370.2 li
120.3 369.96 li
120.3 369.84 li
120.66 370.2 li
101.82 370.2 li
cp
135.3 367.86 mo
139.5 369.96 li
135.3 372.06 li
f
177.72 388.62 mo
177.96 388.68 li
178.08 388.98 li
178.08 416.22 li
177.36 416.22 li
177.36 388.98 li
177.72 389.28 li
cp
179.88 415.5 mo
177.78 419.76 li
175.62 415.56 li
f
297.48 456.18 mo
297.54 456.18 li
297.78 456.3 li
297.9 456.54 li
297.9 478.44 li
297.18 478.44 li
297.18 456.54 li
297.54 456.9 li
297.48 456.9 li
cp
299.64 477.72 mo
297.6 481.98 li
295.38 477.78 li
f
483.48 437.82 mo
409.56 437.82 li
409.92 437.46 li
409.92 437.52 li
409.8 437.76 li
409.56 437.88 li
339.18 437.88 li
339.18 437.16 li
409.56 437.16 li
409.2 437.52 li
409.2 437.46 li
409.32 437.22 li
409.56 437.1 li
483.48 437.1 li
cp
339.9 439.68 mo
335.64 437.52 li
339.9 435.42 li
f
252.96 573.96 mo
234.6 573.96 li
234.96 573.6 li
234.96 573.66 li
234.9 573.9 li
234.6 574.02 li
219.84 574.02 li
219.84 573.3 li
234.6 573.3 li
234.3 573.66 li
234.3 573.6 li
234.36 573.36 li
234.6 573.24 li
252.96 573.24 li
cp
220.56 575.82 mo
216.3 573.66 li
220.56 571.56 li
f
381.66 501.3 mo
358.68 501.3 li
359.04 501 li
359.04 501.06 li
358.98 501.3 li
358.68 501.42 li
339.3 501.42 li
339.3 500.7 li
358.68 500.7 li
358.38 501.06 li
358.38 501 li
358.44 500.7 li
358.68 500.64 li
381.66 500.64 li
cp
339.96 503.16 mo
335.76 501.06 li
339.96 498.96 li
f
484.26 501.3 mo
471.12 501.3 li
471.48 501 li
471.48 501.06 li
471.36 501.3 li
471.12 501.42 li
461.52 501.42 li
461.52 500.7 li
471.12 500.7 li
470.76 501.06 li
470.76 501 li
470.88 500.7 li
471.12 500.64 li
484.26 500.64 li
cp
462.24 503.16 mo
457.98 501.06 li
462.24 498.96 li
f
297.24 395.64 mo
297.36 395.64 li
297.6 395.76 li
297.72 396 li
297.72 414.84 li
297 414.84 li
297 396 li
297.36 396.36 li
297.24 396.36 li
cp
299.46 414.06 mo
297.48 418.38 li
295.26 414.18 li
f
177.6 458.28 mo
177.18 458.28 li
177.54 457.92 li
177.54 501.06 li
177.18 500.7 li
255.78 500.7 li
255.78 501.42 li
177.18 501.42 li
176.94 501.3 li
176.82 501.06 li
176.82 457.92 li
176.94 457.68 li
177.18 457.62 li
177.6 457.62 li
cp
255.06 498.96 mo
259.32 501.06 li
255.06 503.16 li
f
252.6 25.74 mo
177.72 25.74 li
178.08 25.44 li
178.08 276.3 li
177.36 276.3 li
177.36 25.44 li
177.48 25.14 li
177.72 25.08 li
252.6 25.08 li
cp
179.82 275.64 mo
177.72 279.84 li
175.56 275.58 li
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
NUEQLB+ArialMT*1 [12.72 0 0 -12.72 0 0 ]msf
337.02 689.7 mo
(a\))
[7.07867 0 ]xsh
16.9848 471.895 mo
(b\))
[7.07868 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
true set_gvm
/NUEQLC+Arial-ItalicMT*1 uf
/NUEQLC+Arial-ItalicMT uf
/Arial-ItalicMT uf
/NUEQLB+ArialMT*1 uf
/NUEQLB+ArialMT uf
/ArialMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
